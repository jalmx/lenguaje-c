{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n al Lenguaje C","text":"<p>De las cosas importantes que debemos saber del lenguaje C es que es unos los principales lenguajes que existen hoy en d\u00eda. </p> <p>Es la base de la mayor\u00eda de los lenguajes de alto nivel, por ejemplo JAVA, Python, est\u00e1n hechos con este lenguaje. Infinidad de aplicaciones y herramientas est\u00e1n realizadas con dicho lenguaje. El kernel de Linux esta escrito en <code>C</code>.</p> <p>De las cosas importantes a destacar son:</p> <ul> <li>Los archivos tienen la extension <code>.c</code> y <code>.h</code>.</li> <li>Es un lenguaje compilado</li> <li>Es un lenguaje tipado.</li> <li>Te permite una manipulaci\u00f3n libre de la memoria</li> <li>En extremo flexible</li> </ul> <p></p>"},{"location":"#mapa-del-sitio","title":"Mapa del sitio","text":"<p>Warning</p> <p>En caso de no saber algoritmos, primero ir al sitio de Algoritmos para aprender y conocer, dado que aqu\u00ed te toma como que usted ya tiene ese conocimiento previo.</p>"},{"location":"01_variables/","title":"Variables","text":""},{"location":"01_variables/#que-es-una-variable","title":"\u00bfQu\u00e9 es una variable?","text":"<p>Una variable desde el punto de vista computacional, es un espacio en memoria con un nombre, es decir, un espacio determinado al momento de declarar la variable, se indica su tipo y cada tipo tiene cierto espacio en memoria. </p> <p>Es un espacio virtual el cual quedar\u00e1 registrado en la memoria; el cual se podr\u00e1 llamar en diferentes puntos de la programaci\u00f3n cuantas veces la necesitemos. A este espacio se le da un nombre que nos indique para qu\u00e9 ha sido creada. Las variables pueden tomar cualquier tipo de valor</p> <p>Variables</p> <pre><code>int edad = 20; //Variable que almacena un numero, la edad\nfloat altura = 1.7;\nchar letra = 'a';\nchar* nombre = \"Aprendiendo programaci\u00f3n\"; //Variable que almacena una frase (String)\nbool isAlive = true //Variable que almacena un valor booleano\n</code></pre>"},{"location":"01_variables/#que-es-declarar-una-variable","title":"Qu\u00e9 es declarar una variable?","text":"<p>La declaraci\u00f3n de una variable es reservar un espacio en memoria de la computadora. La computadora tiene cierta cantidad de memoria, la cual es repartida entre todos los programas y los propios procesos para ejecutar el sistema operativo. Cuando ejecutamos un programa, \u00e9ste comienza reservar memoria para poder trabajar. Entonces, al declarar variables estamos consumiendo memoria, la cual vamos a utilizar en alg\u00fan momento, si estamos reservando el espacio significa que en alg\u00fan otro momento necesitamos recuperar lo que hemos guardado para realizar otra operaci\u00f3n, de lo contrario no necesitamos reservar memoria si el valor solo ser\u00e1 utilizado una \u00fanica vez.</p>"},{"location":"01_variables/#como-nombrar-una-variable","title":"\u00bfC\u00f3mo nombrar una variable?","text":"<p>Dentro de la programaci\u00f3n existen buenas practicas para declarar variables. Estas reglas se definen a lo largo del tiempo que ha evolucionado. Estas son las reglas gen\u00e9ricas para (casi) todos lenguajes. </p> <ul> <li>Deben comenzar en min\u00fascula</li> <li>Se escriben en min\u00fasculas, las variantes se dan cuando son m\u00e1s de dos palabras.</li> <li>Solo puede contener n\u00fameros despu\u00e9s de la primera letra.</li> <li>Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada <code>variable1</code> y otra llamada <code>Variable1</code>, para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta.</li> <li>No pueden contener espacios entre letras o palabras</li> <li>No puede comenzar con n\u00fameros o s\u00edmbolos</li> <li>No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: <code>!\"\u00b7%&amp;-+/()=?\u00bf...</code>, los \u00fanicos s\u00edmbolos permitidos son <code>$</code> y <code>_</code>.</li> <li>El nombre debe ser descriptivo; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada</li> <li>(Regla especial): Todo de escribe en ingles.</li> <li>(Regla especial): Si se desea escribir una variable combinando dos palabras o m\u00e1s, se hace comenzando la siguiente palabra con mayuscula y todo pegado, a esto se le conoce como la convenci\u00f3n <code>CamelCase</code>.</li> <li>Ejemplos:<ul> <li><code>valor</code></li> <li><code>valor1</code></li> <li><code>valorUno</code></li> <li><code>variableNueva</code></li> </ul> </li> </ul>"},{"location":"02_tipos_datos/","title":"Tipos de datos","text":"<p>Los tipos de datos son la manera en la que vamos a decirle al programa el tama\u00f1o de la variable y al mismo momento</p> Nombre Tipo Tama\u00f1o Rango byte <code>byte</code> 8 bits = 1 byte -128 a 127 o 0 a 255 Car\u00e1cter sin signo <code>unsigned char</code> 1 byte 0 hasta 255 Car\u00e1cter con signo <code>char</code> 1 byte -128 hasta 127 Entero corto sin signo <code>unsigned short int</code> o <code>unsigned short</code> 2 bytes 0 a 65,535 Entero corto con signo <code>short int</code> 2 bytes -32,768 a +32,767 Entero con signo <code>int</code> 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo <code>long int</code> 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo sin signo <code>long long int</code> 8 bytes 9,223,372,036,854,775,808 al +9,223,372,036,854,775,807 Flotante <code>float</code> 4 bytes -3.4\u00b3\u2078 al  +3.4\u00b3\u2078 Doble <code>double</code> 8 bytes -1.7\u00b3\u2070\u2078 al +1.7\u00b3\u2070\u2078 Doble largo <code>long double</code> 12 bytes -1.9\u2074\u2079\u00b3\u00b2 al +1.9\u2074\u2079\u00b3\u00b2 <p>Nota</p> <p>El tipo de dato que aplicara esta en funci\u00f3n de que tan grande sera el valor que contendr\u00e1. Es decir, si el valor no pasar\u00e1 de 255 y entero, podemos usar un tipo <code>char</code>, pero si el valor que podr\u00e1 ser hasta 1,000,000 pues seleccionamos el tipo <code>long int</code>.</p> <pre><code>char i = 0;\nint valor = 20000;\nfloat altura = 1.8;\n</code></pre>"},{"location":"02_tipos_datos/#comentarios","title":"Comentarios","text":"<p>Siempre que escribimos un c\u00f3digo queremos colocar un comentario con respecto a lo que hace el programa o dejarnos una nota para nuestro yo del futuro, obviamente estos comentarios no le interesa al compilador o al programa, es para nosotros.</p> <p>Hay dos maneras de indicar un comentario, que son comentarios en l\u00ednea o multil\u00ednea</p>"},{"location":"02_tipos_datos/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea","text":"<p>La forma de indicar un comentario de una l\u00ednea es usando doble diagonal hacia adelante (<code>//</code>).</p> <pre><code>// comentario de una l\u00ednea\nint edad = 3; // //en esta variable guardo el valor de 3\n</code></pre> <p>Todo lo que se escribe delante de <code>//</code> el compilador lo comienza a tomar como comentario, aun asi tenga c\u00f3digo correcto y propio del lenguaje, dado que al saber que es un comentario lo va a ignorar.</p>"},{"location":"02_tipos_datos/#comentarios-multilinea","title":"Comentarios multil\u00ednea","text":"<p>La forma de indicar un comentario multi l\u00ednea es envolverlo con una diagonal con un asterisco y cierra con un asterisco y una diagonal (<code>/**/</code>).</p> <p>Una de las ventajas es que se puede colocar codigo en cualquier parte sin ser parte del codigo.</p> <pre><code>/*\n* En esta secci\u00f3n se toma como un bloque de comentario\n* Todo lo que esta escrito el compilador lo ignora porque \n* es una indicaci\u00f3n para nosotros\n*/\n\nint valor = 5; /*tambi\u00e9n se puede ocupar como de una l\u00ednea, lo importante es que este envuelto entre los s\u00edmbolos correspondientes*/\n\nfloat /*tipo de variable*/ altura /*nombre de variable*/ = 1.782; \n</code></pre>"},{"location":"03_declaracion_de_variables/","title":"\u00bfC\u00f3mo se declaran las variables ?","text":"<p>Cada lenguaje tiene su sintaxis de declaraci\u00f3n de variables, en nuestro que es <code>lenguaje C</code>, es la siguiente manera:</p> <p>Sintaxis:</p> <pre><code>tipoDeDato nombreVariable = valor;\n</code></pre> <p>Ejemplos:</p> <p><pre><code>int edad = 10;\nfloat altura = 1.4;\nchar letra = 'a';\nbool isLleno = true; // se debe importar el header &lt;stdbool.h&gt;\nchar* nombre =  \"Programacion en C\";\nint myDec = 50/* notaci\u00f3n decimal  */\nint myOct = 062; /* notaci\u00f3n octal (0) */\nint myHex = 0x32; /* notaci\u00f3n hexadecimal (0x) */\n</code></pre> A continuaci\u00f3n se muestra todas las partes de declaraci\u00f3n de variable:</p> <p></p>"},{"location":"03_declaracion_de_variables/#declaracion-de-constantes","title":"Declaraci\u00f3n de constantes","text":"<p>En ocasiones necesitamos declarar una variable que nunca cambie su valor, para eso existe que se vuelva constante, en el caso de <code>C</code>, se cuenta con la palabra reservada <code>const</code> al momento de declarar la variable. Esto lo que hace que una vez sea declarada, nunca mas podr\u00e1 cambiar su valor.</p> <p>La forma de declarar una constante es la siguiente:</p> <pre><code>const tipo_de_dato NOMBRE = valor;\n</code></pre> <p>Observe que ahora la convenci\u00f3n de Camel Case indica que una constante debe ser nombrada en may\u00fasculas, en caso de contar con mas de 2 palabras se van separando con guion bajo (<code>_</code>). Con ello, al momento de verla sabremos que es una constante y ese valor no se puede modificar.</p> <pre><code>const float PI = 3.141592; // declaramos la constante de pi\nconst MAYOR_DE_EDAD = 18; // declaramos el valor para una constante para comprar cuando sea mayor de edad, este valor pues nunca cambiara\n</code></pre> <p>Nota</p> <p>Existe otra manera en cierta manera mas adecuada de definir constantes que se vera mas adelante (Spoiler: Es un preprocesador (<code>#define</code>))</p>"},{"location":"04_estructura_archivo/","title":"Estructura de archivo C b\u00e1sica","text":"<p>De primera instancia si nunca haz programado es muy extra\u00f1o ver muchas cosas en un archivo que pr\u00e1cticamente no hace nada; sin embargo, debemos asimilarlo y tomarlo como una verdad absoluta, dado que para entenderlo hay que recorrer un poco el camino, hasta que cada linea toma todo el sentido del mundo.</p> <p>Con esto pasamos a ver la estructura base que llevara casi todos los archivo en C y mas los que comenzaremos a hacer</p> <pre><code>// nombre del archivo debe ser main.c\n#include &lt;stdio.h&gt;\n\n// funci\u00f3n main\nint main(void){// inicia funci\u00f3n main\n\n    // aqu\u00ed va todo nuestro c\u00f3digo\n\n    return 0; // el valor de retorno de la funci\u00f3n main\n}// termina la funci\u00f3n main\n</code></pre> <p>La estructura anterior por el momento SIEMPRE se escribir\u00e1 as\u00ed, sin preguntar nada y respetando cada s\u00edmbolo en \u00e9l.</p> <p>Por convenci\u00f3n el nombre del archivo en donde va la <code>funci\u00f3n main</code> se llamar\u00e1 <code>main.c</code>. La extension de los archivos en C, es <code>.c</code>; posteriormente aprenderemos que hay otras y tienen otro motivo.</p> <p>Warning</p> <p>Por el momento no se escribir\u00e1 NADA de NADA fuera de las llaves de la funci\u00f3n, esta estrictamente prohibido colocar algo (ya prenderemos d\u00f3nde, c\u00f3mo y porqu\u00e9). Por el momento ten f\u00e9 ciega \ud83d\ude04.</p>"},{"location":"04_estructura_archivo/#sintaxis","title":"Sintaxis","text":"<p>La sintaxis en un lenguaje es como saber las reglas ortogr\u00e1fica de cualquier idioma. Cada lenguaje de programaci\u00f3n tiene la suya, en este caso en C tiene sus reglas:</p> <p><pre><code>// main.c\n#include &lt;stdio.h&gt;\n\n// funci\u00f3n main\nint main(void){\n\n    printf(\"Hola Mundo\");\n\n    return 0;\n}\n</code></pre> </p>"},{"location":"05_salida_datos/","title":"Salida de datos (funci\u00f3n printf)","text":"<p>Lo primero que aprenderemos es como mandar mensajes a la consola o terminal, y es utilizando la funci\u00f3n <code>printf();</code>. Como se muestra en el siguiente ejemplo:</p> <pre><code>// main.c\n#include &lt;stdio.h&gt; // se debe importar la librer\u00eda est\u00e1ndar de entradas y salidas para poder usar printf, de lo contrario marcara un error al compilar\n\n// funci\u00f3n main\nint main(void){\n\n    printf(\"Hola Mundo\");\n\n    return 0;\n}\n</code></pre> <p>La funci\u00f3n <code>printf</code> nos sirve para mandar informaci\u00f3n a la consola, tiene manera especiales para escribir los tipos de datos y ademas tiene caracteres especiales que se detallan a continuaci\u00f3n.</p>"},{"location":"05_salida_datos/#secuencias-de-escape","title":"Secuencias de escape","text":"<p>Las secuencias de escape son caracteres especiales para <code>printf</code>, que no se pueden colocar de manera cotidiana porque para C significa otra cosa, por lo tanto, dicho car\u00e1cter se debe escapar; es decir, agregar un back slash al principio <code>\\</code>.</p> S\u00edmbolo Significado <code>\\n</code> Linea nueva - Enter <code>\\t</code> un tabulador <code>\\r</code> Regresa el cursor al inicio - Retorno de carro <code>\\\\</code> Back slash <code>\\\"</code> Dobles Comillas <code>\\'</code> Comillas simple"},{"location":"05_salida_datos/#ejemplos-con-secuencias-de-escape","title":"Ejemplos con secuencias de escape","text":"<p>Aplicando las secuencias de escape</p> <pre><code>printf(\"Hola\\nMundo\");\n</code></pre> <pre><code>Hola\nMundo\n</code></pre> <pre><code>printf(\"Hola\\tMundo\");\n</code></pre> <pre><code>Hola    Mundo\n</code></pre> <pre><code>printf(\"\\\"Hola Mundo\\\"\");\n</code></pre> <pre><code>\"Hola Mundo\"\n</code></pre> <pre><code>printf(\"\\'Hola Mundo\\'\");\n</code></pre> <pre><code>'Hola Mundo'\n</code></pre>"},{"location":"05_salida_datos/#especificadores-de-formato","title":"Especific\u00e1dores de formato","text":"<p>En <code>C</code> no se puede mandar a imprimir de manera directa una variable, se de usar un especificador de formato adecuado al tipo de variable que se quiere mandar a la salida.</p> <p>Se debe utilizar el s\u00edmbolo de <code>%</code> seguido de la letra que le corresponde al tipo de variable:</p> Especificador de formato Tipo de variable Nombre <code>%i</code>, <code>%d</code> <code>int</code>, <code>short</code> N\u00famero entero <code>%f</code> <code>float</code> N\u00famero real <code>%c</code> <code>char</code> Car\u00e1cter <code>%o</code> <code>int</code> Octal <code>%x</code> <code>int</code> Hexadecimal <code>%i</code> <code>char</code> El valor ASCII del car\u00e1cter <code>%s</code> <code>string</code>.<code>char*</code>, <code>char[]</code> Cadena de caracteres <code>%Lf</code> <code>long double</code> Flotante doble largo <code>%lld</code> <code>long long int</code> Entero largo <code>%u</code> <code>unsigned char</code>,<code>unsigned short</code>, <code>unsigned int</code> Enteros sin signo <code>%lu</code> <code>unsigned long int</code> Entero sin signo <code>%llu</code> <code>unsigned long long int</code> Entero sin signo <code>%p</code> <code>*</code> Direcci\u00f3n de puntero <pre><code>uint8_t valor = 2;\nint edad = 13;\nfloat altura = 1.73;\nchar arroba = '@';\nchar* frase = \"Hola Mundo\";\n\nprintf(\"%i \\n\", edad);\nprintf(\"%f \\n\", altura);\nprintf(\"%c \\n\", arroba);\nprintf(\"%s \\n\", frase);\nprintf(\"%d \\n\", valor);\n</code></pre> <pre><code>13 \n1.730000 \n@ \nHola Mundo \n2 \n</code></pre>"},{"location":"05_salida_datos/#dando-formato","title":"Dando formato","text":"<p>Cuando n\u00fameros <code>float</code> o <code>double</code>, por default se agregan ceros al final para acompletar los espacios de un numero, es decir, si declaramos <code>float a = 4.32;</code> y mandamos a imprimir esta variable el resultado sera <code>4.320000</code>. Pero nosotros no queremos todo esos ceros o simplemente queremos menos decimales, para esto tenemos en los especificadores de formato la forma de indicar que lo acorte:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n    float valor = 21.123456;\n\n    printf(\"El %.1f\\n\", valor);\n    printf(\"El %.2f\\n\", valor);\n    printf(\"El %.3f\\n\", valor);\n    printf(\"El %.4f\\n\", valor);\n    printf(\"El %.5f\\n\", valor);\n    printf(\"El %f\\n\", valor);\n\n    return 0;\n}\n</code></pre>"},{"location":"05_salida_datos/#ejemplos","title":"Ejemplos","text":""},{"location":"05_salida_datos/#-calcular-el-perimetro-y-area-del-cuadrado-con-valores-en-memoria-dando-el-siguiente-formato-ejemplo-el-perimetro-del-rectangulo-es-432-u-y-el-area-del-rectangulo-es-232-u2","title":"- Calcular el per\u00edmetro y area del cuadrado, con valores en memoria, dando el siguiente formato, ejemplo \"El per\u00edmetro del rect\u00e1ngulo es: 43.2 u\" y \"El area del rect\u00e1ngulo es: 23.2 u2\"","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n    float side = 4.31;\n\n    printf(\"CALCULADORA DEL CUADRADO\\n\");\n    printf(\"El valor del lado es %f\\n\", side);\n    float perimetro = side * 4;\n    printf(\"El perimetro es %f u\\n\", perimetro);\n\n    float area = side * side;\n    printf(\"El area es %f u2\\n\", area);\n\n    return 0;\n}\n</code></pre>"},{"location":"05_salida_datos/#ejercicios","title":"Ejercicios","text":"<ul> <li>Imprimir \"Hola mundo\"</li> <li>Imprimir una frase usando secuencias de escape para que entre palabras se haga un salto de l\u00ednea</li> <li>Sumar 2 n\u00fameros e imprimir el resultado</li> <li>Calcular el per\u00edmetro y area del rect\u00e1ngulo, con valores en memoria, dando el siguiente formato, ejemplo \"El perimetro del rectangulo es: 43.2 u\" y \"El area del rectangulo es: 23.2 u2\"</li> </ul>"},{"location":"06_operaciones_aritmeticas/","title":"Operaciones Matem\u00e1ticas","text":""},{"location":"06_operaciones_aritmeticas/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>En esta secci\u00f3n veremos los operadores aritm\u00e9ticos b\u00e1sicos que podemos encontrar en la mayor\u00eda de lenguajes.</p> Nombre S\u00edmbolo Descripci\u00f3n Agrupaci\u00f3n <code>()</code> Realiza la operaci\u00f3n de agrupaci\u00f3n de una operaci\u00f3n. (NO MULTIPLICA) Suma <code>+</code> Realiza la operaci\u00f3n de suma aritm\u00e9tica Resta <code>-</code> Realiza la operaci\u00f3n de resta aritm\u00e9tica Multiplicaci\u00f3n <code>*</code> Realiza la operaci\u00f3n de multiplicaci\u00f3n aritm\u00e9tica Divisi\u00f3n <code>/</code> Realiza la operaci\u00f3n de raz\u00f3n aritm\u00e9tica Residuo o M\u00f3dulo <code>%</code> Realiza la operaci\u00f3n de divisi\u00f3n aritm\u00e9tica y devuelve el residuo de \u00e9sta divisi\u00f3n <p>Cuando somos nuevos en el mundo de la programaci\u00f3n queremos aplicar conocimiento que tenemos con relaci\u00f3n a matem\u00e1ticas, aqu\u00ed existen algunas cuestiones que no se aplican de la misma manera o solo se puede aplicar de cierta forma.</p> <p>Precauciones que debemos tener en cuenta son:</p> <ul> <li>El \u00fanico s\u00edmbolo que podemos ocupar para la divisi\u00f3n es la diagonal o slash (/), no existe otro s\u00edmbolo ni tampoco se puede ocupar los tradicionales que conocemos.</li> <li>El \u00fanico s\u00edmbolo para multiplicaci\u00f3n es el asterisco (*), no existe alg\u00fan otro ni ninguno m\u00e1s sirve para multiplicar.</li> <li>Los par\u00e9ntesis \"( )\" solo agrupan y nada mas. No sirven para multiplicar.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    int valor1 = 4;\n    int valor2 = 3;\n\n    int suma = valor1 + valor2;\n    int resta = valor1 - valor2;\n    int multiplicacion = valor1 * valor2;\n    float division = valor1 / (float)valor2;\n    int modulo = valor1 % valor2;\n\n    printf(\"La suma es %i \\n\", suma);\n    printf(\"La resta es %i \\n\", resta);\n    printf(\"La multiplicaci\u00f3n es %d \\n\", multiplicacion);\n    printf(\"La divisi\u00f3n es %f \\n\", division);\n    printf(\"El residuo es %i \\n\", modulo);\n    return 0;\n}\n</code></pre> <p>Resultado:</p> <pre><code>La suma es 7\nLa resta es 1\nLa multiplicaci\u00f3n es 12\nLa divisi\u00f3n es 1.333333\nEl residuo es 1\n</code></pre>"},{"location":"06_operaciones_aritmeticas/#operador-unitario-","title":"Operador unitario (-)","text":"<p>Existe el operador unitario el cual no necesita hacer una operaci\u00f3n entre dos valores o variables, con agregarlo estar\u00eda realizando la operaci\u00f3n de multiplicar por -1.</p> <pre><code>int valor = 4;\nint inverso = -valor; // aqu\u00ed aplicamos el operador unitario\n\nprintf(\"valor: %d\\n\", valor);\nprintf(\"valor negativo: %d\\n\", inverso);\n</code></pre> <p>Resultado:</p> <pre><code>valor: 4\nvalor negativo: -4\n</code></pre>"},{"location":"06_operaciones_aritmeticas/#operador-de-asignacion","title":"Operador de asignaci\u00f3n (=)","text":"<p>El operador de asignaci\u00f3n (<code>=</code>), el cual asigna un valor a una variable.</p> <p>Danger</p> <p>No es lo mismo asignar que igualar; es decir, en programaci\u00f3n se guardar un dato en una direcci\u00f3n de memoria, e igualar se usa en matem\u00e1ticas.</p>"},{"location":"06_operaciones_aritmeticas/#precedencia-de-operadores","title":"Precedencia de operadores","text":"<p>En C, la expresiones son normalmente evaluador de izquierda a derecha. Sin embargo, cuando una expresi\u00f3n contiene multiples operadores, la precedencia de decide el orden en el cual ser\u00e1n evaluados. Este orden es aplicable a otros muchos lenguajes como C++, C#, Java.</p> Orden Operador 1 <code>()</code>, <code>[]</code>, <code>.</code>, <code>-</code>, <code>&gt;</code>, <code>x++</code>, <code>x--</code> 2 <code>!</code>, <code>~</code>,<code>++x</code>,<code>--x</code>, <code>(type) sizeof * &amp;</code> 3 <code>*</code>,<code>/</code>,<code>%</code> 4 <code>+</code>,<code>-</code> 5 <code>&lt;&lt;</code>,<code>&gt;&gt;</code> 6 <code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>, <code>&gt;=</code> 7 <code>==</code>,<code>!=</code> 8 <code>&amp;</code> 9 <code>^</code> 10 <code>|</code> 11 <code>&amp;&amp;</code> 12 <code>||</code> 13 <code>=</code> 14 <code>,</code> <p>Nota</p> <p>Con respecto a las operaciones matem\u00e1ticas que conoces, sigue funcionando igual, ahora debes a\u00f1adir las relacionadas al lenguaje.</p>"},{"location":"06_operaciones_aritmeticas/#funciones-matematicas","title":"Funciones matem\u00e1ticas","text":"<p>El lenguaje C tiene de manera nativa una librer\u00eda que nos facilita el calculo con funciones matem\u00e1ticas. Para esto existe la librer\u00eda <code>math.h</code>.</p> <pre><code>// la importaci\u00f3n de la librer\u00eda\n\n#include &lt;math.h&gt;\n</code></pre> <p>De la funciones que nos pidiesen interesar son:</p> <ul> <li><code>sqrt(x)</code>: Calculo de ra\u00edz cuadrada</li> <li><code>pow(b,e)</code>: Calculo de potencia</li> <li><code>fabs(x)</code>: valor absoluto</li> <li><code>ceil(x)</code>: redondeo hacia abajo</li> <li><code>floor(x)</code>: redondeo hacia arriba</li> <li><code>cos(x)</code>: identidad trigonometr\u00eda <code>coseno</code>, en radianes</li> <li><code>sin(x)</code>: identidad trigonometr\u00eda <code>seno</code>, en radianes</li> <li><code>tan(x)</code>: identidad trigonometr\u00eda <code>tangente</code>, en radianes</li> </ul> <p>Tiene muchas otras mas.</p> <pre><code>#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n\nint main()\n{\n    int potencia = pow(2,3);\n    int raiz = sqrt(25);\n    int redondeoArriba = floor(25.3);\n    int redondeoAbajo = ceil(25.7);\n    float coseno = cos(45);\n    float seno = sin(45);\n    float tangente = tan(45);\n\n\n    printf(\"2 al cubo es: %d \\n\", potencia);\n    printf(\"la raiz de 25 es: %d \\n\", raiz);\n    printf(\"redondeo arriaba de 25.3 es: %d \\n\", redondeoArriba);\n    printf(\"redondeo abajo de 25.7 es: %d \\n\", redondeoAbajo);\n    printf(\"coseno de 45 es: %.2f \\n\", coseno);\n    printf(\"seno de 45 es: %.2f \\n\", seno);\n    printf(\"tangente de 45 es: %.2f \\n\", tangente);\n    return 0;\n}\n</code></pre>"},{"location":"06_operaciones_aritmeticas/#ejemplos-con-operadores-aritmeticos","title":"Ejemplos con operadores aritm\u00e9ticos","text":"<ul> <li>Calcular el \u00e1rea de un cuadrado. Imprimir calcular el per\u00edmetro y \u00e1rea. Los datos est\u00e1n en memoria.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n    float side = 4.31;\n\n    printf(\"CALCULADORA DEL CUADRADO\\n\");\n    printf(\"El valor del lado es %f\\n\", side);\n    float perimetro = side * 4;\n    printf(\"El perimetro es %f u\\n\", perimetro);\n\n    float area = side * side;\n    printf(\"El area es %f u2\\n\", area);\n\n    return 0;\n}\n</code></pre>"},{"location":"06_operaciones_aritmeticas/#ejercicios-con-operadores-aritmeticos","title":"Ejercicios con operadores aritm\u00e9ticos","text":"<ul> <li>calculadora del circulo. Imprimir calcular el per\u00edmetro y \u00e1rea. Los datos est\u00e1n en memoria.</li> <li>calculadora del rect\u00e1ngulo. Imprimir calcular el per\u00edmetro y \u00e1rea. Los datos est\u00e1n en memoria.</li> <li>calculadora del triangulo. Imprimir calcular el per\u00edmetro y \u00e1rea. Los datos est\u00e1n en memoria.</li> </ul>"},{"location":"06_operaciones_aritmeticas/#operador-de-incremento-y-decremento","title":"Operador de incremento y decremento","text":"<p>El Operador de incremento y decremento son operadores unarios que agregan o sustraen uno de sus operandos, respectivamente. Es normal tener 2 versiones (pre- y post-) de cada operador con sem\u00e1ntica ligeramente diferente. El operador de incremento es escrito como <code>++</code> y el de decremento como <code>--</code>.</p> <p>en progreso</p>"},{"location":"07_entrada_datos_scanf/","title":"Leyendo datos del usuario - Funci\u00f3n <code>scanf()</code>","text":"<p>Para ir mejorando nuestros programas, que sean din\u00e1micos y mucho mas funcionales, debemos recibir informaci\u00f3n por parte del usuario. Para ello una manera es leyendo datos de teclado que ingresa el usuario, y esto es lo que nos permite realizar la funci\u00f3n <code>scanf()</code>. Que podr\u00edamos decir que complementa a la funci\u00f3n <code>printf()</code>.</p> <p>En la siguiente imagen se ve como cada parte de la sentencia:</p> <p></p> <p>En el siguiente ejemplo vemos como quedar\u00eda un c\u00f3digo:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    int edad = 0;\n\n    printf(\"Dar el valor de la tu edad: \");\n    scanf(\"%d\", &amp;edad); //recibo el dato y lo almaceno en la variable edad\n\n    int edadNueva = edad + 5; // hago una operaci\u00f3n con este valor \n\n    printf(\"Tu edad en 5 anios sera de: %d\\n\", edadNueva);// Recuerda que los s\u00edmbolos del abecedario ingles no tiene la e\u00f1e, y no podemos poner de manera directa ese s\u00edmbolo especial\n}\n</code></pre>"},{"location":"07_entrada_datos_scanf/#ejemplos","title":"Ejemplos","text":"<ul> <li>Calcular el promedio de una materia, solicitar cada parcial (3) al usuario, e imprimir el resultado con una frase, ejemplo: \"Tu promedio es: 5.4\"</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    float cal1 = 0;\n    float cal2 = 0;\n    float cal3 = 0;\n\n    printf(\"Dar la calificacion 1: \");\n    scanf(\"%f\", &amp;cal1);\n    printf(\"Dar la calificacion 2: \");\n    scanf(\"%f\", &amp;cal2);\n    printf(\"Dar la calificacion 3: \");\n    scanf(\"%f\", &amp;cal3);\n\n    float promedio = (cal1 + cal2 + cal3) / 3;\n\n    printf(\"Tu promedio es %.2f\\n\", promedio);\n    return 0;\n}\n</code></pre>"},{"location":"07_entrada_datos_scanf/#ejercicios","title":"Ejercicios","text":"<ul> <li>Calculadora del circulo. Imprimir calcular el per\u00edmetro y \u00e1rea. Solicitar los datos al usuario. Dar formato a la salida del resultado, ejemplo: \"El area del circulo es 32.4 u2\", \"El per\u00edmetro del circulo es 11.34 u\"</li> <li>Calculadora de Fuerza (Segunda Ley de Newton): Solicitar al usuario el valor de la masa y la aceleraci\u00f3n, hacer el calculo de la fuerza. Formula \\(F=masa * aceleraci\u00f3n\\). El mensaje de salida debe tener el siguiente formato \"La fuerza es 87.65 N\"</li> <li>Calculadora de Corriente (Ley de Ohms): Solicitar al usuario el valor del voltaje y la resistencia. Hacer el calculo de la corriente. Formula \\(I = \\frac{Voltaje}{Resistencia}\\).</li> </ul>"},{"location":"08_decisiones_1/","title":"Introducci\u00f3n a Decisiones (if)","text":"<p>Ya que sabemos como declarar variables (sentencia), imprimir por pantalla, solicitar valores al usuario; debemos hacer m\u00e1s din\u00e1mico nuestro programa, y la primer forma de hacerlo es tomando una decisi\u00f3n (una comparaci\u00f3n).</p> <p>Para esto es la condici\u00f3n <code>if</code> (<code>si</code>) o estructura de decision <code>if</code></p> <p>La sintaxis de la estructura <code>if</code> b\u00e1sica es la siguiente:</p> <p></p>"},{"location":"08_decisiones_1/#operadores-de-relacion","title":"Operadores de relaci\u00f3n","text":"<p>Los operadores de relaci\u00f3n te dan unicamente dos respuesta (l\u00f3gicas) <code>si</code> o <code>no</code>, que son equivalentes a <code>true</code> o <code>false</code> (booleano), <code>uno</code> o <code>cero</code>, <code>1</code> o <code>0</code> (digitales), <code>0V</code> o <code>5V</code> (voltaje)respectivamente.</p> Nombre Matem\u00e1ticas Lenguaje C <code>Menor que</code> <code>&lt;</code> <code>&lt;</code> <code>Menor o igual que</code> <code>\u2264</code> <code>&lt;=</code> <code>Mayor que</code> <code>&gt;</code> <code>&gt;</code> <code>Mayor o igual que</code> <code>\u2265</code> <code>&gt;=</code> <code>Igual que</code> <code>=</code> <code>==</code> <code>Diferente que</code> <code>\u2260</code> <code>!=</code>"},{"location":"08_decisiones_1/#sintaxis-de-comparacion","title":"Sintaxis de comparaci\u00f3n","text":"<p>La forma en la que se escriben las comparaciones es:</p> Izquierda Centro Derecha <code>valor/variable</code> <code>operador</code> <code>valor/variable</code> <code>5</code> <code>==</code> <code>8</code> <code>a</code> <code>&gt;=</code> <code>b</code> <code>10</code> <code>&lt;=</code> <code>x</code> <code>a</code> <code>&lt;=</code> <code>2</code>"},{"location":"08_decisiones_1/#ejemplos-de-comparacion","title":"Ejemplos de comparaci\u00f3n","text":"<p>Las \u00fanicas comparaciones que se pueden realizar son entre n\u00fameros, con respecto a las letras o car\u00e1cter (\u00fanico), la comparaci\u00f3n es en su valor ASCII, en si los textos no se pueden comparar; sin embargo, aplicado a un lenguaje en concreto esto puede variar.</p> Comparaci\u00f3n Resultado <code>5 &gt; 8</code> false <code>10 &gt; 8</code> true <code>20 &gt; 5</code> false <code>8 &gt;= 8</code> true <code>6 &lt; 8</code> true <code>2 &lt;= 8</code> true <code>0 == 8</code> false <code>1 != -8</code> true <p>Las comparaciones pueden ser entre variables, obviamente dicha variable debe contener un valor previamente.</p> <p>En  este caso las variables tienen este valor:</p> <ul> <li><code>a = 5</code> </li> <li><code>b = 2</code> </li> </ul> Comparaci\u00f3n Resultado <code>a &gt; b</code> true <code>a &gt;= b</code> true <code>a &lt; b</code> false <code>a &lt;= b</code> false <code>a == b</code> false <code>a != b</code> true"},{"location":"08_decisiones_1/#aplicando-la-estructura-if","title":"Aplicando la estructura if","text":"<p>Ahora veremos c\u00f3digo de ejemplo con la estructura <code>if</code></p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    int edad = 0;\n\n    printf(\"Dar el valor de la tu edad: \");\n    scanf(\"%d\", &amp;edad); //recibo el dato y lo almaceno en la variable edad\n\n    if (edad &gt;= 18){ // comparamos si la variable edad es mayor o igual a 18, en caso que sea verdadero se mostrara el texto\n        printf(\"Eres mayor de edad\\n\");\n    }\n\n    if (edad &lt; 18){ // comparamos la variable\n        printf(\"Eres menor de edad\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"08_decisiones_1/#ejemplos","title":"Ejemplos","text":"<p>Calculadora del Cuadrado:</p> <ul> <li>opci\u00f3n 1) per\u00edmetro </li> <li>opci\u00f3n 2) area</li> <li>en caso que de otra opci\u00f3n indicar que \"no existe la opci\u00f3n\"</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    float side = 0.0; //almaceno el valor del lado del cuadrado\n    int option = 0;     //guardo el valor de la opci\u00f3n que me dan\n    printf(\"CALCULADORA DEL CUADRADO\\n\");\n    printf(\"1) Area\\n\");\n    printf(\"2) Perimetro\\n\");\n    scanf(\"%d\", &amp;option);\n\n    if (option == 1){\n        printf(\"Area\\n\");\n        printf(\"Dar el lado: \");\n        scanf(\"%f\", &amp;side);\n        printf(\"El area es %.2f\\n\", (side * side));\n    }\n    if (option == 2){\n        printf(\"Perimetro\\n\");\n        printf(\"Dar el lado: \");\n        scanf(\"%f\", &amp;side);\n        printf(\"El perimetro es %.2f\\n\", (side * 4));\n    }\n\n    char* frase = \"opcion no existe\\n\";\n    if(option &gt;2){\n        printf(\"%s\\n\", frase);\n    }\n\n    if(option &lt; 1){\n        printf(\"%s\\n\", frase);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"08_decisiones_1/#ejercicios","title":"Ejercicios","text":"<ul> <li>El de las mascotas. Preguntar al usuario cuantas mascotas tiene, si tiene 3 o m\u00e1s, decir la frase \"Eres amante de las mascotas\", de lo contrario, decir, \"Compra un gatito\"</li> <li>Calculadora del C\u00edrculo:<ul> <li>opci\u00f3n 1) per\u00edmetro </li> <li>opci\u00f3n 2) area</li> <li>en caso que de otra opci\u00f3n indicar que \"no existe la opci\u00f3n\"</li> </ul> </li> </ul>"},{"location":"09_decisiones_2/","title":"Decisiones (if-else)","text":"<p>Vimos la estructura <code>if</code> b\u00e1sica, ahora conoceremos quien lo complementa, y este es el bloque <code>else</code>.</p> <p>La estructura <code>if-else</code> (<code>si - de lo contrario</code>) o estructura de decision <code>if-else</code>.</p> <p></p>"},{"location":"09_decisiones_2/#estructura-if-else","title":"Estructura <code>if-else</code>","text":"<p>La sintaxis de la estructura <code>if-else</code> es la siguiente:</p> <pre><code>if (comparacion_a_true){\n   // bloque \"if\" que se ejecutara si la companion resulta verdadera\n}else{\n   // bloque \"else\" que se ejecutara si la companion resulta verdadera\n}\n</code></pre> <p>El anterior c\u00f3digo que hicimos lo podemos mejorar con la siguiente modificaci\u00f3n:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    int edad = 18;\n\n    if (edad &gt;= 18){ // comparamos si la variable edad es mayor o igual a 18, en caso que sea verdadero se mostrara el texto\n        printf(\"Eres mayor de edad\");\n    }else{ // comparamos la variable\n        printf(\"Eres menor de edad\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"09_decisiones_2/#if-else-anidados","title":"<code>if-else</code> anidados","text":"<pre><code>if (comparacion_a_true){\n   // bloque \"if\" que se ejecutara si la companion resulta verdadera\n   if (comparacion_a_true){\n   // bloque \"if\" que se ejecutara si la companion resulta verdadera\n        if (comparacion_a_true){\n        // bloque \"if\" que se ejecutara si la companion resulta verdadera\n        }else{\n        // bloque \"else\" que se ejecutara si la companion resulta verdadera\n        }\n    }else{\n    // bloque \"else\" que se ejecutara si la companion resulta verdadera\n    }\n}else{\n   // bloque \"else\" que se ejecutara si la companion resulta verdadera\n   if (comparacion_a_true){\n   // bloque \"if\" que se ejecutara si la companion resulta verdadera\n    }else{\n    // bloque \"else\" que se ejecutara si la companion resulta verdadera\n    }\n}\n</code></pre> <pre><code>    if(comparacion_a_true){\n        // bloque \"if\" que se ejecutara si la companion resulta verdadera de lo contrario va al siguiente\n    }else if (comparacion_a_true){\n        // bloque \"if\" que se ejecutara si la companion resulta verdadera de lo contrario va al siguiente\n    }else if (comparacion_a_true){\n        // bloque \"if\" que se ejecutara si la companion resulta verdadera de lo contrario va al siguiente\n    }else if (comparacion_a_true){\n        // bloque \"if\" que se ejecutara si la companion resulta verdadera de lo contrario va al siguiente\n    }else{\n        // en caso que no entro en ning\u00fan if previo entra y se ejecuta este c\u00f3digo\n    }\n</code></pre>"},{"location":"09_decisiones_2/#ejercicios","title":"Ejercicios","text":"<p>Calculadora del Cuadrado:</p> <ul> <li>opci\u00f3n 1) per\u00edmetro</li> <li>opci\u00f3n 2) area</li> <li>en caso que de otra opci\u00f3n indicar que \"no existe la opci\u00f3n\"</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    float side = 0.0;\n    int option = 0;\n    printf(\"CALCULADORA DEL CUADRADO\\n\");\n    printf(\"1) Area\\n\");\n    printf(\"2) Perimetro\\n\");\n    scanf(\"%d\", &amp;option);\n\n    if (option == 1){\n        printf(\"Area\\n\");\n        printf(\"Dar el lado: \");\n        scanf(\"%f\", &amp;side);\n        printf(\"El area es %.2f\\n\", (side * side));\n    }else if (option == 2){\n        printf(\"Perimetro\\n\");\n        printf(\"Dar el lado: \");\n        scanf(\"%f\", &amp;side);\n        printf(\"El perimetro es %.2f\\n\", (side * 4));\n    }else{\n        char* frase = \"opcion no existe\\n\";\n        printf(\"%s\\n\", frase);\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Solicitar un numero al usuario, e imprimir si el numero es \"par\" o \"impar\"</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    int value = 0;\n    printf(\"Dar un valor: \");\n    scanf(\"%d\", &amp;value);\n\n    if (value % 2 == 0){\n        printf(\"Es par\\n\");\n    }else{\n        printf(\"Es Impar\\n\");\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Dar 2 n\u00fameros e indicar cual es el mayor de los 2, o sin son iguales</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    int valor1 = 0;\n    int valor2 = 0;\n    printf(\"Dar un valor 1: \");\n    scanf(\"%d\", &amp;valor1);\n\n    printf(\"Dar un valor 2: \");\n    scanf(\"%d\", &amp;valor2);\n\n    if (valor1 &gt; valor2){\n        printf(\"%d es mayor que %d\\n\", valor1, valor2);\n    }else if (valor1 &lt; valor2){\n        printf(\"%d es mayor que %d\\n\", valor1, valor2);\n    }else{\n        printf(\"%d es igual a %d\\n\", valor1, valor2);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"09_decisiones_2/#ejercicios-if-else","title":"Ejercicios (if-else)","text":"<ul> <li>Solicitar un numero al usuario, e imprimir si el numero es \"m\u00faltiplo de 3\" o \"NO m\u00faltiplo de 3\".(Es decir, es divisible entre 3)</li> <li>Calculadora de Ley de ohm. Dar las 4 opciones al usuario.</li> <li>1) Calcular Voltaje</li> <li>2) Calcular Corriente</li> <li>3) Calcular Resistencia</li> <li>4) Salir del programa</li> <li>Si da una opci\u00f3n que no existe, debe indicarlo y terminar el programa</li> <li>Calculo de resistencia en serie y paralelo, Se le dar\u00e1 lan opciones al usuario para elegir que desea calcular, es decir,</li> <li>si paralelo o serie,</li> <li>despu\u00e9s solicita 3 valores e imprime el resultado.</li> <li>Si da un opci\u00f3n no valida, no solicita nada y termina el programa</li> <li>Ecuaci\u00f3n se serie \\(R_T = \\Sigma_{i=1}^{n} R_{i}\\)</li> <li>Ecuaci\u00f3n paralelo \\(R_T= \\frac{1}{\\Sigma_{i=1}^{n}\\frac{1}{R_i} }\\)</li> <li>Calcular el promedio final, solicita al usuario sus calificaciones parciales una a una, y al final da el mensaje \"Aprobado\", en caso que haya pasado arriba de 6 y \"Estas en repite\" si es menor.</li> </ul>"},{"location":"09_decisiones_2/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Un operador l\u00f3gico sirve para combinar comparaciones y en funci\u00f3n del resultado tomar una decisi\u00f3n, comprende de 3 operadores (hay mas pero no lo veremos aqu\u00ed) que son <code>AND</code>, <code>OR</code> y <code>NOT</code>. Con todo ello para realizar varias validaciones y obtener un resultado <code>booleano</code>.</p>"},{"location":"09_decisiones_2/#las-tablas-de-verdad-de-los-operadores","title":"Las tablas de verdad de los operadores","text":""},{"location":"09_decisiones_2/#and-y-","title":"AND (Y) -&gt; (&amp;&amp;)","text":"Entrada 1 Entrada 2 Salida <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code> <p>Regla</p> <p>AND nos dice que mientras exista a la entrada un <code>false</code>, tendremos un valor <code>false</code> a la salida</p>"},{"location":"09_decisiones_2/#or-o-","title":"OR (O) -&gt; (||)","text":"Entrada 1 Entrada 2 Salida <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <p>Regla</p> <p>OR nos dice que mientras exista a la entrada un <code>true</code>, tendremos un valor <code>true</code> a la salida</p>"},{"location":"09_decisiones_2/#not-no-inverter-","title":"NOT (NO) (Inverter) -&gt; (!)","text":"Entrada Salida <code>false</code> <code>true</code> <code>true</code> <code>false</code> <p>Regla</p> <p>NOT nos dice que todo lo que recibe lo invierte.</p>"},{"location":"09_decisiones_2/#sintaxis-con-operadores-logicos","title":"Sintaxis con operadores l\u00f3gicos","text":"<p>La forma en la que se escriben las comparaciones con operadores l\u00f3gicos es:</p> Izquierda Centro Derecha <code>comparaci\u00f3n</code> <code>operador l\u00f3gico</code> <code>comparaci\u00f3n</code> <code>(a == b)</code> <code>&amp;&amp;</code> <code>(x &gt; y)</code> <code>(5 == 8)</code> <code>&amp;&amp;</code> <code>(9 &gt; 4)</code> <code>(a &gt;= b)</code> <code>||</code> <code>(0 == 8)</code> <code>(10 &lt;= x)</code> <code>&amp;&amp;</code> <code>(1 != -8)</code> <code>(a &lt;= 2)</code> <code>||</code> <code>(0 == 8)</code> <p>En el caso de <code>not</code> aplica solo a una comparaci\u00f3n:</p> Aplicaci\u00f3n Resultado <code>!true</code> <code>false</code> <code>!(3 == 3)</code> <code>false</code> <code>!(6 &gt;= 1)</code> <code>false</code> <code>!(1 != 1)</code> <code>true</code> <code>!(3 &lt; 3)</code> <code>true</code> <p>Se pueden concatenar (unir) n comparaciones con operadores l\u00f3gicos, pero siempre se debe utilizar el operador para poder unir mas comparaciones, ejemplo:</p> <p><code>(5 == 8)</code> <code>&amp;&amp;</code> <code>(9 &gt; 4)</code> <code>||</code> <code>(a &gt;= b)</code> <code>||</code> <code>(0 == 8)</code> <code>&amp;&amp;</code> <code>!(2 == 2)</code></p>"},{"location":"09_decisiones_2/#ejemplos-de-comparacion","title":"Ejemplos de comparaci\u00f3n","text":"Descripci\u00f3n Resultado <code>(9 &gt; 4)</code> <code>&amp;&amp;</code> <code>(3 &lt; 6)</code> <code>true</code> <code>(8 == 3)</code> <code>||``(2 != 3)</code> <code>true</code> <code>!true</code> <code>false</code> <code>(5 == 8)</code> <code>&amp;&amp;</code> <code>(9 &gt; 4)</code> <code>false</code> <code>(0 &gt;= -5)</code> <code>||``(0 == 8)</code> <code>true</code> <code>(10 &lt;= 5)</code> <code>&amp;&amp;</code> <code>(1 != -8)</code> <code>false</code> <code>!(2 == 2)</code> <code>false</code>"},{"location":"09_decisiones_2/#ejemplos-operadores-logicos","title":"Ejemplos (operadores l\u00f3gicos)","text":"<ul> <li>Solicitar un n\u00famero de entre 0 al 20, si el n\u00famero es menor a 10 Y par, indicar que el \"n\u00famero es par y menor a 10\"; si es menor a 10, pero NO es par dar el mensaje \"N\u00famero menor a 10\", de lo contrario que indique que es mayor a 10.</li> </ul>"},{"location":"09_decisiones_2/#ejercicios-operadores-logicos","title":"Ejercicios (operadores l\u00f3gicos)","text":"<ul> <li>Preguntar al usuario si le \"gusta correr\" y despu\u00e9s si le \"gusta nadar\", si ambos casos responde que 1)si 2)no, mandar el mensaje de que \"es muy fitness\", de lo contrario \"deber\u00edas hacer m\u00e1s ejercicio\" (Operadores l\u00f3gicos)</li> <li>En una variable almacena la calificaci\u00f3n, se debe verificar el valor de la calificaci\u00f3n es valida; es decir, calificaciones arriaba de 10 Y abajo de 0, \"no es posibles\"; si la calificaci\u00f3n es menor o igual a 10 Y mayor o igual a cero, debe indicar que es correcta la calificaci\u00f3n.</li> </ul> <p>Nota: No es la \u00fanica forma en la que se pueden realizar estos ejemplos y ejercicios, recuerda que lo importante es resolver el problema, que hayan m\u00e1s o menos pasos, diferentes formulas, etc, no significa que este mal.</p>"},{"location":"10_ciclos_1/","title":"Introducci\u00f3n a ciclos (while)","text":"<p>Si deseas conocer la teor\u00eda b\u00e1sica de ciclos, ve a la documentaci\u00f3n de algoritmos en la secci\u00f3n de ciclos</p>"},{"location":"10_ciclos_1/#estructura-del-ciclo-while","title":"Estructura del ciclo <code>while</code>","text":"<p>El primer ciclo que vamos a conocer se llama <code>while</code> (mientras). Este ciclo, primero verifica una comparaci\u00f3n y en caso que se cierta o de como resultado <code>true</code>, entrara al bloque de c\u00f3digo que esta entre las llaves, una vez termina la ultima linea; es decir, antes de la llave de cierre, vuelve a la comparaci\u00f3n inicial y eval\u00faa la comparaci\u00f3n, en caso que sea <code>true</code> repite el ciclo, de lo contrario termina y continua la ejecuci\u00f3n del programa.</p> <p></p> <pre><code>while(comparacion_a_true){ //inicia bloque while\n\n    // bloque de c\u00f3digo que se repite\n    // hasta que la companion no se cumpla\n\n} //termina bloque while\n</code></pre>"},{"location":"10_ciclos_1/#ejemplos","title":"Ejemplos","text":"<ul> <li>Imprimir 5 veces la palabra \"Hola\"</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    char* mensaje = \"Hola\";\n\n    int contador = 0;\n\n    while (contador &lt; 5){\n        printf(\"%s\\n\", mensaje);\n        contador = contador + 1;\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Imprimir del 0 al 5</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    int contador = 0;\n\n    while (contador &lt;= 5){\n        printf(\"%d\\n\", contador);\n        contador = contador + 1;\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Hacer una calculadora de 2 n\u00fameros, que tenga la opci\u00f3n de sumar, restar y salir, si da una opci\u00f3n que no esta, volver a mostrar el menu inicial y da un mensaje \"No existe la opci\u00f3n\", el usuario solo podr\u00e1 salir si elije la opci\u00f3n de salir. Cada que termina de hacer la operaci\u00f3n de sumar o restar, volver a mostrar el men\u00fa, hasta que elija salir de la aplicaci\u00f3n.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\nint main(){\n\n    int opt = 0;\n\n    while (opt != 3){\n        printf(\"Calculadora \\n\");\n        printf(\"1) Suma \\n\");\n        printf(\"2) Resta \\n\");\n        printf(\"3)Salir \\n\");\n        scanf(\"%d\", &amp;opt);\n\n        if (opt == 1){\n            printf(\"==== SUMA ====\\n\");\n            float a = 0.0;\n            float b = 0.0;\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;a);\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;b);\n            printf(\"La suma es %f\\n\", a + b);\n        }\n        else if (opt == 2){\n            printf(\"==== RESTA ====\\n\");\n            float a = 0.0;\n            float b = 0.0;\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;a);\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;b);\n            printf(\"La resta es %f\\n\", a - b);\n        }else if (opt == 3){\n            printf(\"Saliendo\\n\");\n        }else{\n            printf(\"Error!!! Opcion no existe!!!\\n\");\n        }\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Imprimir la tabla de multiplicar del 15, del 1 al 10</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    const int TABLA = 15;\n    int count = 1;\n\n    while (count &lt;= 10){\n        printf(\"%d x %d = %d\\n\", TABLA, i, (TABLA * i));\n        count++;\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Obtener el promedio de una materia, solicitando cada parcial (3) (CON UN CICLO), al final imprime el promedio</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    int n = 0;\n    float suma = 0.0;\n    while(n &lt; 3){\n        float calificacion =0;\n        printf(\"Dar la calificacion %d: \", n+1);\n        scanf(\"%f\", &amp;calificacion);\n        suma += calificacion;\n        n++;\n    }\n    float total = suma / 3;\n    printf(\"El promedio es: %.2f\\n\", total);\n\n    return 0;\n}\n</code></pre>"},{"location":"10_ciclos_1/#juego-adivina-el-numero","title":"Juego: Adivina el numero","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nint main() {\n\n    int maximo = 20;\n    int contadorFalla =0;\n    int fallaMaxima = 3;\n    srand( time(NULL));\n    int numeroRandom = rand() % (maximo + 1);\n    printf(\"BIENVENIDO AL PARAISO\\n\");\n    printf(\"----&gt; %d\\n\", numeroRandom);\n    printf(\"Descubre el numero oculto  &gt;:)\\n\");\n\n    while(1){\n     int numeroUsuario = 0;\n     printf(\"Dame un numero de entre 0 al %d: \", maximo);\n     scanf(\"%d\", &amp;numeroUsuario);\n\n     if(numeroRandom == numeroUsuario){\n      printf(\"Es correcto, haz ganado!!!!!!\\n\");\n      break;\n     }else if(numeroRandom &gt; numeroUsuario){\n      printf(\"El numero es mayor!!!!!!\\n\");\n     }else{\n      printf(\"El numero es menor!!!!!!\\n\");\n     }\n     contadorFalla++;\n     if(contadorFalla == fallaMaxima){\n      printf(\"GAME OVER!!! You're a looser &gt;:) \");\n      break;\n     }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"10_ciclos_1/#ejercicios-while","title":"Ejercicios (while)","text":"<ul> <li>Imprimir del 1 al 10</li> <li>Realizar una calculadora aritm\u00e9tica b\u00e1sica, es decir, que tenga suma, resta, multiplicaci\u00f3n y division; todas estas opciones en el men\u00fa. Tambi\u00e9n agregar la opci\u00f3n de salir. Cuando el usuario elija alguna operaci\u00f3n, se le solicitaran los datos que se necesitan, al entregar el resultado, vuelve a mostrar el menu. El programa termina hasta que el usuario elije la opci\u00f3n de salir. Si da una opci\u00f3n que no existe, dar el mensaje \"Opci\u00f3n no existente\" y vuelve a mostrar el menu.</li> <li>Imprimir la tabla de multiplicar que el usuario elija, del 1 al 10; es decir, si el usuario desea la tabla del 8, debe salir por pantalla 8x1=8, 8x2=16, ...</li> <li>Calcular el promedio final, solicita al usuario sus calificaciones parciales una a una, y al final da el mensaje \"Aprobado\", en caso que haya pasado arriba de 6 y \"Estas en repite\" si es menor.</li> <li>Promedio de 3 parciales (con un ciclo), y si saco entre 0 a menor que 6, indicar que no paso, y se va a recursamiento, si saco entre 6 a 10, indicar que paso. Si da un calificaci\u00f3n que no existe, indicar que no existe</li> <li>Realizar una calculadora de resistencia serie, el usuario ira introduciendo los valores uno a uno, la solicitud es infinita, hasta que le usuario decide cuando terminar, la opci\u00f3n de salir es -1, despu\u00e9s de terminar imprime el resultado</li> <li>Realizar una calculadora de resistencia serie y paralelo, el usuario cual elije la opci\u00f3n, el usuario ira introduciendo los valores uno a uno, la solicitud es infinita, hasta que le usuario decide cuando terminar, la opci\u00f3n de salir es -1. despu\u00e9s de terminar imprime el resultado</li> </ul>"},{"location":"11_ciclos_2/","title":"Ciclos (for)","text":"<p>Si deseas conocer la teor\u00eda b\u00e1sica de ciclos, ve a la documentaci\u00f3n de algoritmos en la secci\u00f3n de ciclos</p>"},{"location":"11_ciclos_2/#estructura-del-ciclo-for","title":"Estructura del ciclo <code>for</code>","text":""},{"location":"11_ciclos_2/#ejemplos","title":"Ejemplos","text":"<ul> <li>Imprimir 5 veces la palabra \"Hola\"</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    for (int i = 0; i &lt; 5; i++){\n        printf(\"Hola\\n\");\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Imprimir del 1 al 5</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    for (int i = 1; i &lt;= 5; i++){\n        printf(\"%d\\n\",i);\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Hacer una calculadora de 2 n\u00fameros, que tenga la opci\u00f3n de sumar, restar y salir, si da una opci\u00f3n que no esta, volver a mostrar el menu inicial y da un mensaje \"No existe la opci\u00f3n\", el usuario solo podr\u00e1 salir si elije la opci\u00f3n de salir. Cada que termina de hacer la operaci\u00f3n de sumar o restar, volver a mostrar el men\u00fa, hasta que elija salir de la aplicaci\u00f3n.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\nint main(){\n\n    for(int opt = 0; opt != 3;){\n        printf(\"Calculadora \\n\");\n        printf(\"1) Suma \\n\");\n        printf(\"2) Resta \\n\");\n        printf(\"3)Salir \\n\");\n        scanf(\"%d\", &amp;opt);\n\n        if (opt == 1){\n            printf(\"==== SUMA ====\\n\");\n            float a = 0.0;\n            float b = 0.0;\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;a);\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;b);\n            printf(\"La suma es %f\\n\", a + b);\n        }\n        else if (opt == 2){\n            printf(\"==== RESTA ====\\n\");\n            float a = 0.0;\n            float b = 0.0;\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;a);\n            printf(\"Dar el primer numero: \");\n            scanf(\"%f\", &amp;b);\n            printf(\"La resta es %f\\n\", a - b);\n        }else if (opt == 3){\n            printf(\"Saliendo\\n\");\n        }else{\n            printf(\"Error!!! Opcion no existe!!!\\n\");\n        }\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Imprimir la tabla de multiplicar del 15, del 1 al 10</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void){\n\n    const int TABLA = 15;\n\n    for (int i = 1; i &lt;= 10; i+=5){\n\n        printf(\"%d x %d = %d\\n\", TABLA, i, TABLA * i);\n\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Obtener el promedio de una materia, solicitando cada parcial (3) (CON UN CICLO), al final imprime el promedio</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    float suma = 0.0;\n\n    for(int n = 0; n &lt; 3; n++) {\n        float calificacion =0;\n        printf(\"Dar la calificacion %d: \", n+1);\n        scanf(\"%f\", &amp;calificacion);\n        suma += calificacion;\n    }\n    float total = suma / 3;\n    printf(\"El promedio es: %.2f\\n\", total);\n\n    return 0;\n}\n</code></pre> <ul> <li>Hacer un programa para calcular un promedio, la cantidad de datos se le preguntara al usuario, despu\u00e9s, har\u00e1 la solicitud de todos esos datos y al final dar el valor del promedio</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n    int total = 0;\n    int suma = 0;\n    printf(\"CALCULADORA DE MEDIA\\n\");\n    printf(\"Dame cuantos valores tienes: \");\n    scanf(\"%d\", &amp;total);\n\n    int contador = 1;\n    for(;;){\n        int dato = 0;\n        printf(\"Dame el dato %d: \", contador);\n        scanf(\"%d\", &amp;dato);\n        suma += dato; // suma = suma + dato\n        if(contador &gt;= total){\n            break;\n        }\n        contador++;\n    }\n    float promedio = suma / (float) total;\n    printf(\"El promedio es %.2f\\n\", promedio);\n    return 0;\n}\n</code></pre>"},{"location":"11_ciclos_2/#ejercicios-for","title":"Ejercicios (for)","text":"<ul> <li>Imprimir del 1 al 10</li> <li>Realizar una calculadora aritm\u00e9tica b\u00e1sica, es decir, que tenga suma, resta, multiplicaci\u00f3n y division; todas estas opciones en el men\u00fa. Tambi\u00e9n agregar la opci\u00f3n de salir. Cuando el usuario elija alguna operaci\u00f3n, se le solicitaran los datos que se necesitan, al entregar el resultado, vuelve a mostrar el menu. El programa termina hasta que el usuario elije la opci\u00f3n de salir. Si da una opci\u00f3n que no existe, dar el mensaje \"Opci\u00f3n no existente\" y vuelve a mostrar el menu.</li> <li>Imprimir la tabla de multiplicar que el usuario elija, del 1 al 10; es decir, si el usuario desea la tabla del 8, debe salir por pantalla 8x1=8, 8x2=16, ...</li> <li>Calcular el promedio final, solicita al usuario sus calificaciones parciales una a una, y al final da el mensaje \"Aprobado\", en caso que haya pasado arriba de 6 y \"Estas en repite\" si es menor.</li> <li>Promedio de 3 parciales (con un ciclo), y si saco entre 0 a menor que 6, indicar que no paso, y se va a recursamiento, si saco entre 6 a 10, indicar que paso. Si da un calificaci\u00f3n que no existe, indicar que no existe</li> <li>Realizar una calculadora de resistencia serie, el usuario ira introduciendo los valores uno a uno, la solicitud es infinita, hasta que le usuario decide cuando terminar, la opci\u00f3n de salir es -1, despu\u00e9s de terminar imprime el resultado</li> <li>Realizar una calculadora de resistencia serie y paralelo, el usuario cual elije la opci\u00f3n, el usuario ira introduciendo los valores uno a uno, la solicitud es infinita, hasta que le usuario decide cuando terminar, la opci\u00f3n de salir es -1. despu\u00e9s de terminar imprime el resultado</li> <li>Calcular el promedio de una materia, (con un ciclo), se solicitan los 3 parciales, si obtuvo un promedio igual o mayor a 9, indicar \"Felicidades te vas de vacaciones, tu promedio es %.2f\"; de lo contrario pide la calificaci\u00f3n del ordinario, calcular este promedio (calificacionFinal = (promedio1 + ordinario)/2), si obtuviste un promedio mayor o igual a 6, dar este el mensaje \"La libraste, sacaste %.2f\", de lo contrario \"Te toca baja, sacaste %.2f\"</li> </ul>"},{"location":"12_arrays/","title":"Arrays (Arreglos)","text":"<p>Los arreglos son estructuras de datos que consisten en elementos de datos relacionados del mismo tipo.</p> <p>Los arreglos y las estructuras son entidades \u201cest\u00e1ticas\u201d que mantienen el mismo tama\u00f1o durante la ejecuci\u00f3n del programa, por lo tanto, crearse y destruirse cada vez que se entra y se sale de los bloques en los que se definen.</p> <p>Un arreglo es un grupo consecutivo de localidades de memoria relacionadas por el hecho de que tienen el mismo nombre y el mismo tipo. Para hacer referencia a una localidad o a un elemento del arreglo en particular, especificamos el nombre del arreglo y la posici\u00f3n num\u00e9rica del elemento en particular dentro del arreglo.</p> <p>Podemos ver como se representar\u00eda un array:</p> <ul> <li>Nombre del array: arr</li> <li>Tama\u00f1o: 6</li> <li>Posiciones: 0 al 5</li> <li>Tipo: int (Enteros)</li> </ul> <p></p>"},{"location":"12_arrays/#declaracion-de-un-array","title":"Declaraci\u00f3n de un array","text":"<p>Debemos recordar que un array solo puede contener un solo tipo de dato, por lo tanto, primero se indica el tipo de dato que tendr\u00e1, seguido de corchetes cuadrados y dentro de los corchetes indicamos la cantidad de espacio que tendr\u00e1 para almacenar datos <code>[ size ]</code>, esto indica que es un array.</p> <p>Los arreglos ocupan espacio en memoria. El programador especifica el tipo de cada arreglo y el n\u00famero de elementos que necesita el arreglo, de manera que la computadora pueda reservar la cantidad adecuada de memoria.</p>"},{"location":"12_arrays/#estructura-de-declaracion-de-un-array","title":"Estructura de declaraci\u00f3n de un array","text":""},{"location":"12_arrays/#ejemplo-de-declaracion-de-un-array","title":"Ejemplo de declaraci\u00f3n de un array","text":"<p>Nota: Esta forma es para arrays vac\u00edos; es decir, solo se define el espacio que tendr\u00e1.</p>"},{"location":"12_arrays/#agregando-datos-en-el-array","title":"Agregando datos en el array","text":"<p>Para agregar datos a un array debemos indicar la posici\u00f3n y asignar el valor que queremos.</p> <p></p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    int arr[5]; // Array de 5 espacios\n    arr[0] = 4;  // Agredo el valor 4 a la posici\u00f3n 0\n    arr[1] = -2; // Agredo el valor -2 a la posici\u00f3n 1\n    arr[2] = 10; // Agredo el valor 10 a la posici\u00f3n 2\n    arr[3] = 22; // Agredo el valor 22 a la posici\u00f3n 3\n    arr[4] = 7;  // Agredo el valor 7 a la posici\u00f3n 4\n\n  return 0;\n}\n</code></pre>"},{"location":"12_arrays/#obteniendo-datos-de-un-array","title":"Obteniendo datos de un array","text":"<p>Para obtener los datos de un array se indica la posici\u00f3n y este valor es devuelto; con esto ya podemos guardarlo en una variable o usarlo.</p>"},{"location":"12_arrays/#de-manera-manual","title":"De manera manual","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n  int arr[5]; // Array de 5 espacios\n\n  arr[0] = 4;  // Agredo el valor 4 a la posici\u00f3n 0\n  arr[1] = -2; // Agredo el valor -2 a la posici\u00f3n 1\n  arr[2] = 10; // Agredo el valor 10 a la posici\u00f3n 2\n  arr[3] = 22; // Agredo el valor 22 a la posici\u00f3n 3\n  arr[4] = 7;  // Agredo el valor 7 a la posici\u00f3n 4\n\n  int valor1 = arr[0]; // obtengo o saco el valor de la posici\u00f3n 0\n  int valor2 = arr[1]; // obtengo o saco el valor de la posici\u00f3n 1\n  int valor3 = arr[2]; // obtengo o saco el valor de la posici\u00f3n 2\n  int valor4 = arr[3]; // obtengo o saco el valor de la posici\u00f3n 3\n  int valor5 = arr[4]; // obtengo o saco el valor de la posici\u00f3n 4\n\n  printf(\"El valor 1 es %d\\n\", valor1);\n  printf(\"El valor 2 es %d\\n\", valor2);\n  printf(\"El valor 3 es %d\\n\", valor3);\n  printf(\"El valor 4 es %d\\n\", valor4);\n  printf(\"El valor 5 es %d\\n\", valor5);\n\n  return 0;\n}\n</code></pre> <p>Salida:</p> <pre><code>El valor 1 es 4\nEl valor 2 es -2\nEl valor 3 es 10\nEl valor 4 es 22\nEl valor 5 es 7\n</code></pre>"},{"location":"12_arrays/#usando-un-for","title":"Usando un <code>for</code>","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n  int arr[5]; // Array de 5 espacios\n\n  arr[0] = 4;  // Agredo el valor 4 a la posici\u00f3n 0\n  arr[1] = -2; // Agredo el valor -2 a la posici\u00f3n 1\n  arr[2] = 10; // Agredo el valor 10 a la posici\u00f3n 2\n  arr[3] = 22; // Agredo el valor 22 a la posici\u00f3n 3\n  arr[4] = 7;  // Agredo el valor 7 a la posici\u00f3n 4\n\n  for (int i = 0; i &lt; 5; i++){\n    int valor = arr[i]; //obtengo el valor de la posici\u00f3n indicada\n    printf(\"El valor en la posicion %d es : %d\\n\", i, valor );\n  }\n\n  return 0;\n}\n</code></pre> <p>Salida:</p> <pre><code>El valor en la posicion 0 es : 4\nEl valor en la posicion 1 es : -2\nEl valor en la posicion 2 es : 10\nEl valor en la posicion 3 es : 22\nEl valor en la posicion 4 es : 7\n</code></pre>"},{"location":"12_arrays/#arrays-inicializados-con-datos","title":"Arrays inicializados con datos","text":""},{"location":"12_arrays/#ejemplos","title":"Ejemplos","text":"<ul> <li>Declarar un array de 10 espacios y llenarlo del 1 al 10. Despu\u00e9s, imprimir todos los valores.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\n#define SIZE 10\n\nint main() {\n\n int numeros[SIZE]; //declaro array de 10 espacios\n\n for(int i = 0; i &lt; SIZE; i++){ //llenado el array del 1 al 10\n  numeros[i] = i + 1;\n }\n\n for(int index = 0; index &lt; SIZE; index++){ //imprimiendo todo el array\n  printf(\"Posicion [%d] - valor: %d\\n\", index, numeros[index]);\n }\n\n return 0;\n}\n</code></pre> <ul> <li>Declarar un array de 7 espacios y llenarlo con n\u00fameros al azar. Despu\u00e9s, imprimir todos los valores.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\n#define SIZE 7\n#define MAX 100  //el numero m\u00e1ximo al azar\n\nint main() {\n srand(time(NULL));\n int numeros[SIZE]; //declaro array de 10 espacios\n\n for(int i = 0; i &lt; SIZE; i++){ //llenado el array con n\u00fameros al azar\n  int numeroRandom = rand() % (MAX + 1);\n  numeros[i] = numeroRandom ;\n }\n\n for(int index = 0; index &lt; SIZE; index++){ //imprimiendo todo el array\n  printf(\"Posicion [%d] - valor: %d\\n\", index, numeros[index]);\n }\n\n return 0;\n}\n</code></pre> <ul> <li>Leer 5 n\u00fameros enteros almacenarlos en un array. Imprimirlos en orden inverso.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\n#define SIZE 5\n\nint main() {\n\n int numeros[SIZE]; //declaro array de 10 espacios\n\n for(int i = 0; i &lt; SIZE; i++){ //llenado el array con n\u00fameros al azar\n    int numero = 0;\n    printf(\"[%d]Da un numero entero: \", i+1);\n    scanf(\"%d\", &amp;numero);\n    numeros[i] = numero;\n }\n\n printf(\"++++++++++++++++++++++++\\n\");\n\n for(int index = SIZE-1; index &gt;= 0; index--){ //imprimiendo todo el array\n    printf(\"Posicion [%d] - valor: %d\\n\", index, numeros[index]);\n }\n\n return 0;\n}\n</code></pre> <ul> <li>Llenar un array a partir un n\u00famero que elija el usuario, despu\u00e9s solicitar n\u00fameros al usuario para llenar el array, crear otro array y llenarlo con los mismo valores al cuadrado e imprimir la sumatoria de los n\u00fameros que est\u00e1n al doble.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n\n int size = 0;\n long sumDoble = 0;\n long sum = 0;\n\n printf(\"Da el tamanio del array que quieres crear: \");\n scanf(\"%d\", &amp;size);\n\n int datos[size];\n int datosDobles[size];\n\n for(int i = 0; i &lt; size; i++){\n  printf(\"Da el datos %d: \", i+1);\n  scanf(\"%d\", &amp;datos[i]);\n }\n\n for(int i = 0; i &lt; size; i++){\n  datosDobles[i] = pow( datos[i], 2 );\n }\n\n printf(\"Los datos al doble:\\n\");\n for(int i = 0; i &lt; size; i++){\n  printf(\"%d\\t\", datosDobles[i]);\n  sum += datos[i];\n  sumDoble += datosDobles[i];\n }\n printf(\"\\nLa suma basica: %ld\\n\", sum);\n printf(\"La suma basica al doble: %ld\\n\", sumDoble);\n\n return 0;\n}\n</code></pre> <ul> <li>Calculo de la media, la desviaci\u00f3n est\u00e1ndar y varianza, de una serie de datos que ser\u00e1n dados por el usuario, de igual manera, la cantidad de datos se le solicitan al usuario.</li> </ul> \\[media = \\bar{x}= \\frac{\\sum {x_i}}{n}\\] \\[desviaci\u00f3n = \\sigma =\\sqrt{\\frac{\\sum {(x_i - \\bar{x} )^2}}{n}}\\] \\[varianza = s^2 =\\frac{\\sum {(x_i - \\bar{x} )^2}}{n}\\] <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main(int argc, char *argv[]) {\n\n    int size = 0;\n    long sum = 0;\n\n    printf(\"Cuantos datos tienes: \");\n    scanf(\"%d\", &amp;size);\n\n    int datos[size];\n\n    for(int i=0; i &lt;size; i++){\n        int dato = 0;\n        printf(\"Da el dato %d: \", i + 1);\n        scanf(\"%d\", &amp;dato);\n        sum+= dato;\n        datos[i] = dato;\n    }\n\n    float media = sum / (float)size;\n    float varianza = 0;\n    float sumVarianza = 0;\n\n    for(int i= 0; i &lt; size ; i++){\n        sumVarianza = pow(datos[i] - media , 2);\n    }\n\n    varianza = sumVarianza / size;\n\n    float desviacionEstandar = sqrt(varianza);\n\n    printf(\"====================================\\n\");\n    printf(\"La media es %.2f\\n\", media);\n    printf(\"La varianza es %.2f\\n\", varianza);\n    printf(\"La desviacion Estandar es %.2f\\n\", desviacionEstandar);\n    printf(\"====================================\\n\");\n\n    return 0;\n}\n</code></pre> <ul> <li>Crear un array con 5 espacios, llenarlo con valores al azar y crear una gr\u00e1fica de barras</li> </ul> <p>Ejemplo de salida</p> <pre><code>valor 1 [5]: *****\nvalor 2 [2]: **\nvalor 3 [2]: **\nvalor 4 [7]: *******\nvalor 5 [2]: **\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\n#define SIZE 5\n#define MAX 20  //el numero m\u00e1ximo al azar\n\n    int main() {\n    srand(time(NULL));\n    int datos[SIZE]; //declaro array de 10 espacios\n\n    for(int i = 0; i &lt; SIZE; i++){ //llenado el array con n\u00fameros al azar\n        datos[i] = rand() % (MAX + 1);\n    }\n\n\n    for(int index = 0; index &lt; SIZE; index++){ //imprimiendo todo el array\n        printf(\"valor %d [%d]:\\t\", index + 1, datos[index]);\n\n        for(int j =0; j &lt; datos[index]; j++){\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre> <ul> <li>Llenar un array de 10 posiciones con n\u00fameros al azar; despu\u00e9s, se deben cambiar los n\u00fameros pares por un cero.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\n#define SIZE 10\n#define MAX 100  //el numero m\u00e1ximo al azar\n\nint main() {\n    srand(time(NULL));\n    int datos[SIZE]; //declaro array de 10 espacios\n\n    for(int i = 0; i &lt; SIZE; i++){ //llenado el array con n\u00fameros al azar\n        datos[i] = rand() % (MAX + 1);\n    }\n\n    for(int index = 0; index &lt; SIZE; index++){ //imprimiendo todo el array\n        printf(\"valor %d: %d\\n\", index + 1, datos[index]);\n    }\n    printf(\"----------------------\\n\");\n\n    int par = 0;\n    for(int index = 0; index &lt; SIZE; index++){ //imprimiendo todo el array\n\n        if(datos[index] % 2 == 0){\n            datos[index] = 0;\n            par++;\n            printf(\"-&gt;\");\n        }\n        printf(\"valor %d: %d\\n\", index + 1, datos[index]);\n    }\n    printf(\"----------------------\\n\");\n    printf(\"Numeros pares: %d\\n\", par);\n\n    return 0;\n    }\n</code></pre>"},{"location":"12_arrays/#ejercicios","title":"Ejercicios","text":"<ul> <li>Contar cu\u00e1ntos elementos negativos hay en un array de 10 n\u00fameros. De un array con datos por default.</li> <li>Se debe llenar un array con 5 valores impares, solicitar al usuario valores, pero solo los valores impares se deben almacenar, hasta que se haya llenado el array, se termina de solicitar valores e imprime los valores guardados.</li> <li>Declarar un array de 8 espacios y llenarlo a partir de un valor dado por el usuario; es decir, si dan el valor de 3, comienza llenando los espacios con 3, 4, 5, ... hasta terminar. Despu\u00e9s, imprimir el primer y ultimo valor.</li> <li>Calculo de la media, la desviaci\u00f3n est\u00e1ndar, varianza y la moda, de 10 datos. Todos los datos se le solicitan al usuario. Crear una gr\u00e1fica de barras con los datos</li> <li>Encontrar el valor m\u00e1ximo y m\u00ednimo de un array de 6 n\u00fameros ingresados por el usuario e indicar cual es la diferencia entre esos valores.</li> <li>Leer dos arrays de 5 enteros cada uno y mostrar la suma de cada elemento en su posici\u00f3n homologa; es decir, sumar del array_1 de la posici\u00f3n 0 con el valor del array_2 de la posici\u00f3n 0, asi sucesivamente.</li> </ul>"},{"location":"13_funciones/","title":"Funciones","text":"<p>Una funci\u00f3n es un bloque de c\u00f3digo que se puede reutilizar, con esto podemos crear mejor software, mantenible y entendible. Las funciones se pueden a llamar las veces que sean necesarias y ellas pueden existir la cantidad de instrucciones que se pueden ejecutar no tienen limite (existen buenas practicas para escribir funciones).</p> <p>Tenemos varias formas para crear una funci\u00f3n, que devuelven alg\u00fan valor, que no retornen nada, que puedan recibir argumentos o ninguno, siempre todo esto esta en funci\u00f3n de lo que vayamos a realizar.</p> <p>Aqu\u00ed solo ver\u00e1n funciones con argumentos por valor, NO POR REFERENCIA</p>"},{"location":"13_funciones/#tipos-de-retorno-de-una-funcion","title":"Tipos de retorno de una funci\u00f3n","text":"Nombre Tipo Tipo de valor de retorno void <code>void</code> No retorna nada byte <code>byte</code> Retorna del tipo byte Car\u00e1cter sin signo <code>unsigned char</code> Retorna del tipo car\u00e1cter sin singo Car\u00e1cter con signo <code>char</code> Retorna del tipo car\u00e1cter con singo Entero corto sin signo <code>unsigned short int</code> o <code>unsigned short</code> Retorna del tipo short sin signo Entero corto con signo <code>short int</code> Retorna del tipo short con signo Entero con signo <code>int</code> Retorna del tipo  Entero con signo Entero largo <code>long int</code> Retorna del tipo Entero largo Entero largo sin signo <code>long long int</code> Retorna del tipo Entero largo sin signo Flotante <code>float</code> Retorna del tipo flotante Doble <code>double</code> Retorna del tipo Doble Doble largo <code>long double</code> Retorna del tipo Doble largo <p>Ver mas detalles del tama\u00f1o del tipo en la secci\u00f3n 2</p>"},{"location":"13_funciones/#estructura-de-una-funcion","title":"Estructura de una funci\u00f3n","text":"<p>La estructura de una funci\u00f3n se conforma inicialmente por el tipo de valor que se va a retornar, seguido del nombre la funci\u00f3n, seguido de sus par\u00e9ntesis, si reciben argumentos, estos se separan por comas de lo contrario se dejan vac\u00edos, por ultimo abrimos llave indicando que ahi inicia todo el c\u00f3digo contenido en la funci\u00f3n, dentro colocamos todas las instrucciones que realizara la funci\u00f3n, por ultimo se coloca <code>return</code> si es que va a devolver algo, de lo contrario no se escribe y cerramos con la llave de cierre, lo que indica que la funci\u00f3n termina.</p> <p>Nota: EL nombre de la funci\u00f3n debe ser un verbo; es decir, una acci\u00f3n, esto debe describir qu\u00e9 es lo que realiza la funci\u00f3n con tan solo leerlo. Nota: Una funci\u00f3n debe solo hacer una sola cosa, si esta haciendo dos, se debe dividir la funci\u00f3n o repensar si esta construida de manera correcta.</p> <pre><code>tipoRetorno nombreFuncion(arg1, arg2, ...){\n  return ; // depende si la funci\u00f3n retorna alg\u00fan valor\n}\n</code></pre> <p>Existen variantes para construir una funci\u00f3n, dependiendo de nuestras necesidades.</p> <p></p>"},{"location":"13_funciones/#funcion-sin-retorno","title":"Funci\u00f3n sin retorno","text":""},{"location":"13_funciones/#funcion-con-retorno","title":"Funci\u00f3n con retorno","text":""},{"location":"13_funciones/#funciones-prototipo","title":"Funciones prototipo","text":"<p>En C tenemos la opci\u00f3n de primero indicar la definici\u00f3n de una funci\u00f3n, es decir, su forma pero, el funcionamiento se declara despu\u00e9s. Esta definici\u00f3n previa se llama <code>prototipo</code> de la funci\u00f3n.</p> <p>Primero se declara la forma y estructura de la funci\u00f3n, despu\u00e9s colocamos nuestra funci\u00f3n <code>main()</code>, despu\u00e9s de ello, ya se desarrolla la funci\u00f3n.</p> <p></p>"},{"location":"13_funciones/#scope-alcance-de-variables","title":"Scope (Alcance de variables)","text":"<p>Las variables son objetos que pueden cambiar su valor durante la ejecuci\u00f3n de un programa. En el lenguaje de programaci\u00f3n C podemos distinguir entre tres tipos de variables: locales, globales y est\u00e1ticas. Las variables locales son objetos definidos tanto en el programa principal como en las funciones y su alcance est\u00e1 limitado solamente al programa principal o a la funci\u00f3n en la cual est\u00e1n definidas. Por ejemplo, cada variable local definida en una funci\u00f3n comienza a existir s\u00f3lo cuando se llama a esa funci\u00f3n, y desaparece cuando el control regresa al programa principal. Puesto que no retienen su valor, deben ser inicializadas cada vez que se ejecuta la funci\u00f3n, de otra forma contendr\u00e1n basura.</p> <p>C permite adem\u00e1s definir variables locales a un bloque \u2014 conjunto de instrucciones \u2014, las cuales desaparecen luego de ejecutar el bloque. Cabe destacar que las variables locales tienen prioridad sobre las variables globales. Es decir, si tenemos una variable global entera <code>I</code> y una variable local entera tambi\u00e9n denominada <code>I</code> en una funci\u00f3n, cada vez que utilicemos la variable en la funci\u00f3n estaremos haciendo referencia a la variable local. Incluso una variable local definida en un bloque tiene prioridad sobre una variable local definida obviamente con el mismo nombre en la misma funci\u00f3n.</p> <p>Por otra parte, las variables globales son objetos definidos antes del inicio del programa principal y su alcance es muy amplio, ya que tiene influencia tanto en el programa principal como en todas las funciones.</p> <p>Finalmente, las variables est\u00e1ticas son similares a las locales, pero conservan su valor durante la ejecuci\u00f3n del programa. Es decir, comienzan a existir cuando se llama a la funci\u00f3n y conservan su valor aun cuando el control regresa al programa principal.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint valor = 1; // variable global\n\nvoid funcion()\n{\n    int valor = 4; // variable local\n\n    printf(\"valor: %d\", valor);\n}\n\nint main(int argc, char const *argv[])\n{\n    funcion();\n    return 0;\n}\n</code></pre> <p>Salida:</p> <pre><code>valor: 4\n</code></pre>"},{"location":"13_funciones/#ejercicios-de-funciones","title":"Ejercicios de funciones","text":"<ul> <li>Crear una funci\u00f3n para mostrar un saludo.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nvoid saludo(void)\n{\n    printf(\"Hola :D !!!\");\n}\n\nint main(void)\n{\n    saludo();\n    return 0;\n}\n</code></pre> <ul> <li>Crear una funci\u00f3n para calcular el cubo de un numero.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nvoid suma(int valor)\n{\n    int resultado = valor * valor * valor;\n    printf(\"El cubo es %d\", resultado);\n}\n\nint main(void)\n{\n    int valor1 = 4;\n\n    suma(valor1);\n\n    return 0;\n}\n</code></pre> <ul> <li>Crear una funci\u00f3n para mostrar la suma de 2 n\u00fameros.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nvoid suma(int a, int b)\n{\n    int resultado = a + b;\n    printf(\"La resultado es %d\", resultado);\n}\n\nint main(void)\n{\n    int valor1 = 4;\n    int valor2 = 5;\n    suma(valor1, valor2);\n\n    return 0;\n}\n</code></pre> <ul> <li>Crear una funci\u00f3n para calcular el cuadrado de un n\u00famero, este valor se retorna (aplicando prototipos).</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint cuadrado(int valor);\n\nint main(void)\n{\n    int valor = 4;\n    int resultado = cuadrado(valor);\n\n    printf(\"El cuadrado de %d es: %d\", valor, resultado);\n\n    return 0;\n}\n\nint cuadrado(int numero)\n{\n    return numero * numero;\n}\n</code></pre> <ul> <li>Crear funciones para calcular Ley de Ohms.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nfloat voltaje(float, float);\nfloat corriente(float, float);\nfloat resistencia(float, float);\n\nint main(void)\n{\n    float v = 23.5;\n    float c = 4.8;\n    float r = 1200;\n\n    printf(\"El voltaje es %.2fV\\n\", voltaje(c, r));\n    printf(\"La corriente es %.2fA\\n\", corriente(v, r));\n    printf(\"La resistencia es %.2f Ohms\\n\", resistencia(c, v));\n\n    return 0;\n}\n\nfloat voltaje(float corriente, float resistencia)\n{\n    return corriente * resistencia;\n}\nfloat corriente(float voltaje, float resistencia)\n{\n    return voltaje / resistencia;\n}\nfloat resistencia(float corriente, float voltaje)\n{\n    return voltaje / corriente;\n}\n</code></pre> <ul> <li>Crear una funci\u00f3n para convertir de grados Celsius a grados Fahrenheit</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nfloat celsiusToFahrenheit(float);\nfloat fahrenheitToCelsius(float);\n\nint main(void)\n{\n    float celsius = 108;\n    float fahrenheit = 120;\n\n    printf(\"Grados %.2f C es %.2f F\\n\", celsius, celsiusToFahrenheit(celsius));\n    printf(\"Grados %.2f F es %.2f C\\n\", fahrenheit, fahrenheitToCelsius(fahrenheit));\n\n    return 0;\n}\n\nfloat celsiusToFahrenheit(float temp)\n{\n    return (5.0 / 9.0 * temp) - 32;\n}\n\nfloat fahrenheitToCelsius(float temp)\n{\n    return (9.0 / 5.0) + 32;\n}\n</code></pre> <ul> <li>Crear una funci\u00f3n para calcular la media, se debe pasar el array y el largo del array.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nfloat media(float[], int);\n\nint main(void)\n{\n    int size = 3;\n    float calificaciones[] = {7, 9,10};\n\n    float promedio = media(calificaciones, size);\n\n    printf(\"El promedio es %.2f\\n\", promedio);\n\n    return 0;\n}\n\nfloat media(float numeros[], int largo)\n{\n    float suma = 0;\n\n    for (int i = 0; i &lt; largo; i++)\n    {\n        suma += numeros[i];\n    }\n\n    return suma / largo;\n}\n</code></pre>"},{"location":"13_funciones/#ejercicios-funciones-basicas","title":"Ejercicios (Funciones b\u00e1sicas)","text":"<p>En todos los ejercicios aplicar la forma de prototipo de funciones, posterior a ello, tendr\u00e1 la funci\u00f3n <code>main()</code> en donde se pone a prueba el funcionamiento de las funciones creadas.</p> <ul> <li>Realizar las funciones para calcular suma y resta, recibiendo 2 valores</li> <li>Realizar las funciones para calcular area y per\u00edmetro de figuras geom\u00e9tricas<ul> <li>circulo</li> <li>rect\u00e1ngulo</li> <li>cuadrado</li> </ul> </li> <li>Realizar funci\u00f3n que reciba 3 n\u00fameros y retorne el numero mas chico.</li> <li>Realizar funci\u00f3n para calcular la resistencia en seria, se pasa un array con los datos y el largo del array, la funci\u00f3n retorna el resultado</li> <li>Realizar funci\u00f3n para calcular la resistencia en paralelo, se pasa un array con los datos y el largo del array, la funci\u00f3n retorna el resultado</li> </ul>"},{"location":"practicas/","title":"Pr\u00e1cticas en C b\u00e1sicas","text":""},{"location":"practicas/#practicas-en-c-basicas","title":"Pr\u00e1cticas en C b\u00e1sicas","text":""},{"location":"practicas/#basicos","title":"B\u00e1sicos","text":"<ol> <li>Realizar el c\u00e1lculo del per\u00edmetro de un cuadrado, con datos en memoria, e imprimir el resultado</li> <li>Realizar el c\u00e1lculo del per\u00edmetro y area de un rect\u00e1ngulo, solicitando el lado de la figura al usuario, e imprimir el resultado, primero per\u00edmetro, y despu\u00e9s el area.</li> <li>Realizar el c\u00e1lculo del area de un cuadrado, solicitando el lado de la figura al usuario, e imprimir el resultado.</li> <li>Realizar un programa que realice el c\u00e1lculo de Fuerza en la segunda Ley de Newton. La formula es \\(Fuerza = masa * aceleraci\u00f3n\\). Solicitando al usuario las variables necesarias.</li> <li>Realizar una calculadora que convierta de cent\u00edmetros a pulgadas, solicitando el dato al usuario, e imprimir el resultado. 1 In = 2.54cm. Solicitando el valor al usuario, e imprimir el resultado.</li> <li>Convertidor de temperatura de Fahrenheit a Celsius. \\(C=\\frac{5}{9}(F - 32)\\). Solicitando el valor al usuario, e imprimir el resultado.</li> </ol>"},{"location":"practicas/#decisiones","title":"Decisiones","text":"<ol> <li>Realizar una calculadora b\u00e1sica, que realice la operaci\u00f3n de sumar, restar, multiplicar, dividir. Al comenzar muestre un menu y el usuario elija la opci\u00f3n deseada. Se debe pedir el primer valor y el segundo, con ello realizar la operaci\u00f3n</li> <li>Solicitar un n\u00famero entero al usuario, e imprimir por pantalla si es valor par o impar</li> <li>Hacer una calculadora de \u00e1reas geom\u00e9tricas, las opciones son:</li> <li>\u00c1rea del cuadrado</li> <li>\u00c1rea del c\u00edrculo</li> <li>\u00c1rea del tri\u00e1ngulo</li> <li> <p>Con opci\u00f3n de salir del programa y al final imprimir el resultado con la frase \"El \u00e1rea del figura nombre de la figura elegida es resultado\"</p> </li> <li> <p>Hacer una calculadora de ley de ohms, las opciones son:</p> </li> <li>Calcular resistencia</li> <li>Calcular corriente</li> <li>Calcular voltaje</li> <li>Calcular potencia</li> <li> <p>Con opci\u00f3n de salir del programa y al final debe imprimir el resultado con la frase \"El resultado es: \"</p> </li> <li> <p>Que resuelva una ecuaci\u00f3n de segundo orden, aplicando la f\u00f3rmula general; recuerda que no existen las ra\u00edces negativas. Debe entregarle los valores de las ra\u00edces o en caso que alguna o ninguna ra\u00edz exista, indicarlo. Nota: Debes usar las funciones matem\u00e1ticas que vienen en el lenguaje</p> </li> <li>Realizar una calculadora del Teorema de Pit\u00e1goras, el usuario debe elegir, cateto opuesto, adyacente o hipotenusa, salir, que desear calcular. Nota: Debes usar las funciones matem\u00e1ticas que vienen en el lenguaje</li> <li>Hacer una caja registradora, que reciba el valor del producto y al final entregue el costo total con IVA y sin IVA; es decir, En total es $18.35 y con IVA son $21.28, recordar que el IVA es del 16%</li> </ol>"},{"location":"practicas/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<ol> <li> <p>Solicitar al usuario su promedio actual, en valor entero, el algoritmo debe tomar la decisi\u00f3n con bas\u00e9 al n\u00famero ingresado, y dar un mensaje (ver la tabla)</p> Rango de calificaci\u00f3n Mensaje a imprimir 0 a menor que 6 \"lastima margarito\" 6 a menor que 7 \"Apl\u00edcate\" 7 a menor que 8 \"Apenitas y la libraste, metele pap\u00ed\" 8 a menor que 9 \"Bastante bien, puedes mejorar\" 9 a menor que 10 \"muy bien amiguito, te ganaste la cheve!\" Igual a 10 \"Excelente, tu muy bien\" Menor a 0 y mayor a 10 \"Calificaci\u00f3n no posible\" </li> <li> <p>C\u00e1lculo de BMI (Indice de Masa Corporal) para peso y altura, indicando cual es tu BMI y en que nivel de obesidad te encuentras (Ver tabla). La formula es \\(BMI = peso (kg) * estatura^2 (cm)\\)</p> IMC Nivel de peso Por debajo de 18.5 Bajo peso 18.5 \u2013 24.9 Normal 25.0 \u2013 29.9 Sobrepeso 30.0 o m\u00e1s Obesidad </li> <li> <p>Mandar la letra del m\u00faltiplo o submultiple correspondiente, es decir, si el usuario ingresa el valor de 1,000, el valor que se debe desplegar por pantalla es la letra \"K\", si el usuario ingresa el valor de 0.02, se debe desplegar por pantalla la letra \"m\"</p> Unidad S\u00edmbolo Rango pico p \\(x10^{-12}\\) nano n \\(x10^{-}\\) micro u \\(x10^{-6}\\) mili m \\(x10^{-3}\\) unidad kilo K \\(x10^{3}\\) mega M \\(x10^{6}\\) giga G \\(x10^{9}\\) </li> </ol>"},{"location":"practicas/#ciclos-while-y-con-for","title":"Ciclos <code>while</code> y con <code>for</code>","text":"<p>Todos estos ejercicios se debe implementar un ciclo <code>while</code> y otro con la version del <code>for</code> . No esta permitido hacer uso de las funciones propias del lenguaje que pueden resolver alg\u00fan problema o alguna parte de el, a menos que lo indique en la instrucci\u00f3n.</p> <ol> <li>Imprimir del 1 al 99.</li> <li>Imprimir una tabla de equivalencia de temperaturas de Celsius y Fahrenheit. Desde 0\u00baC hasta 100\u00baC. Es decir, 0C -&gt; 32F, 1C -&gt; 33.8F, 2C -&gt; 35.6F ..... 99C -&gt; 210.2, 100C -&gt; 212F</li> <li>Calcular el promedio final, solicita al usuario sus calificaciones parciales una a una, y al final da el mensaje \"Aprobado\", en caso que haya pasado arriba de 6 y \"Estas en repite\" si es menor. Considerando que son 3 parciales.</li> <li>Imprimir la tabla del 8, desde 8x1=8 hasta 8x10=80.</li> <li>Realizar un programa para visualizar la tabla de multiplicar que desee el usuario, el usuario dar\u00e1 el valor para la tabla, la tabla debe de ir desde el 1 hasta el 10, es decir, por ejemplo si da el numero 3, la tabla comienza en 3x1=3 ... hasta 3x10=30</li> <li>Realizar un programa para visualizar la tabla de multiplicar que desee el usuario, el usuario dar\u00e1 el valor para la tabla, tambi\u00e9n debe dar el limite donde comienza hasta donde termina, es decir, por ejemplo si da el numero 5, comenzando desde el 3 hasta el 25, comenzara la tabla 5x3 = 15 ... 5x25=125</li> <li>Leer 10 n\u00fameros enteros, solicitando uno a uno al usuario, e imprimir al final cu\u00e1ntos fueron par y cu\u00e1ntos impar.</li> <li>Calcular el factorial de un n\u00famero entero. Se le solicita al usuario que ingrese un n\u00famero entero el cu\u00e1l quiere calcular el factorial del mismo. Ejemplo: 5! = 120</li> <li>Calcular la potencia de un n\u00famero, solicita al usuario el n\u00famero que desea elevar y despu\u00e9s la base a la cu\u00e1l lo elevara. Ejemplo: 2^2= 4, 2^3=8</li> <li>Leer 10 n\u00fameros, solicitando uno a uno al usuario, y al final se imprime por pantalla el n\u00famero m\u00e1s alto ingresado de los 10.</li> <li>Calculadora de la segunda ley de newton. Sale el men\u00fa indicando que desea calcular y la opci\u00f3n de salir. Despu\u00e9s solicita al usuario los valores que conoce e imprimir el resultado, una vez termina de hacer todas las operaciones, debe regresar al men\u00fa inicial, debe existir una opci\u00f3n para terminal el programa, en caso que coloque una opci\u00f3n no existen, debe volver a mostrar el mensaje.</li> <li>C\u00e1lculo de la media de un conjunto de datos. Se le pregunta al usuario cuantos n\u00fameros son, comienza a pedirlos uno a uno y al final imprime el resultado de la media de todos los datos.</li> <li>C\u00e1lculo de la media de un conjunto de datos positivos. En cada iteraci\u00f3n pregunta al usuario si quiere terminar para conocer el resultado o ingresar otro valor. Cuando elija terminar, imprimir el valor total del promedio o media.</li> <li>Realizar un programa que solicite las calificaciones del parcial; es decir, ir\u00e1 pidiendo una a una las calificaciones, y al final que diga si te vas a recursamiento o no</li> <li>Algoritmo para convertir n\u00famero decimal a binario, debe ir mostrando el numero en binario uno a uno, no es todo el numero binario completo, comenzando por el bit mas significativo. Por ejemplo el usuario ingresa el valor de 5, debe imprimir 101. Dado que 5 en binario es 101.</li> <li> <p>Una pasteler\u00eda nos solicita realizar un programa para una maquina de pastelitos, las opciones son las siguientes</p> <p></p> <ul> <li>Debe ir sumando las opciones que elije que elija el usuario. Pero cada vez que termine de elegir, debe volver a mostrar el men\u00fa, hasta que el usuario elija terminar debe imprimir la cantidad total a pagar. El usuario en cualquier momento puede terminar la orden y la maquina debe darle la cantidad a pagar.</li> <li>Por ejemplo, al inicio muestra el menu de pastel, cupcake y salir. Si elije, pastel, ahora le muestra las opciones de chocolate, vainilla, natural y salir, el usuario elije vainilla, y por ultimo elije chispas, debe preguntar si a\u00f1ade algo mas, si es asi, vuelve a mostrar el menu inicial. En caso que elija que ya termino, debe imprimir la cantidad que debe pagar, es decir, (5+1+0.5) \"Cantidad a pagar $6.5\".</li> <li>Recuerda el usuario puede salir en cualquier momento y debe recibir la cantidad que debe pagar.</li> <li>Extra:</li> <li>Generar un listado de todo lo que solicito, es decir, generar una especie de ticket y al final dar el valor a pagar</li> </ul> </li> <li> <p>Realizar una calculadora de ley de Ohm, al inicio te da el men\u00fa para seleccionar que se desea calcular; para terminar el programa se debe dar la opci\u00f3n de salida, si no el programa sigue mostrando el menu inicial, si el usuario ingresa un valor y \"no existe en el menu\", manda mensaje que la opci\u00f3n no existe y vuelve a mostrar el menu. El resultado lo debe lanzar en el mejor formato, es decir, si el resultado es 1,000 ohms, en pantalla debe salir 1k, si es posible agregar el s\u00edmbolo de Omega (\\(\\Omega\\)) para resistencias, de lo contrario colocar la palabra \"Ohms\". Si el resultado es 0.005A en pantalla debe salir 5mA. El usuario debe ingresar el valor sin redondear, es decir, si son 10mA debe ingresar -&gt; 0.01A, si el valor es 10k\\(\\Omega\\) debe ingresar -&gt; 10000.</p> </li> </ol> Facebook Mecatr\u00f3nica 85 Realizado por Alejandro Leyva"},{"location":"practicas_2/","title":"Pr\u00e1cticas en C","text":""},{"location":"practicas_2/#arrays","title":"Arrays","text":"<ol> <li>Calcular la suma y el promedio de los elementos de un array de 10 n\u00fameros. Los valores iniciales deben estar en memoria. Es decir, un array lleno de inicio, tu elijes los valores.</li> <li>Encontrar el valor m\u00e1ximo y m\u00ednimo de un array de 8 n\u00fameros ingresados por el usuario.</li> <li>Contar cu\u00e1ntos n\u00fameros pares e impares hay en un array de 10 elementos. Este array se debe llenar con n\u00fameros al azar, imprimir todos los n\u00fameros; despu\u00e9s, da el resultado de cuantos son par e impar.</li> <li>Multiplicar cada elemento de un array por un valor constante dado por el usuario. El array debe ser de 10 elementos, llenados al azar.</li> <li>Crear un programa con un array de enteros y lo divida en dos: uno con pares y otro con impares. Este array inicial se debe llenar con n\u00fameros al azar y la cantidad de datos que lo indique el usuario; no puede ser un numero menor a 5, en caso que den un valor menor dar un mensaje que no puede dar menor a 5 y crear el array con espacio de 5.</li> <li>Declarar un array de 10 espacios, llenarlo con los primeros 10 n\u00fameros pares positivos, por medio de un ciclo.</li> <li>Inicializar un array con valores predefinidos <code>{3, 5, 7, 9, 11}</code> y mostrarlos</li> <li>Leer 5 n\u00fameros reales (float) desde teclado y calcular su promedio.</li> <li>Crear un array con 10 valores al azar, solicitar un valor al usuario e indicar cuantos son mayores y menores que el valor indicado por el usuario.</li> </ol>"},{"location":"practicas_2/#funciones-basicas","title":"Funciones b\u00e1sicas","text":"<p>En todos los ejercicios aplicar la forma de prototipo de funciones, posterior a ello, tendr\u00e1 la funci\u00f3n <code>main()</code> en donde se pone a prueba el funcionamiento de las funciones creadas.</p> <ol> <li>Crear un programa en C, con 4 funciones, sumar, restar, dividir y multiplicar, cada funci\u00f3n recibe 2 argumentos de tipo <code>float</code>.</li> <li>Crear un programa en C, con 3 funciones para calcular la 2da Ley de Newton.<ol> <li>Masa</li> <li>Aceleraci\u00f3n</li> <li>Fuerza</li> </ol> </li> <li>Crear un programa en C, para estad\u00edstica, las funciones que se necesitan son:<ol> <li>Media</li> <li>Desviaci\u00f3n est\u00e1ndar</li> <li>Varianza</li> <li>Meda + 1 desviaci\u00f3n est\u00e1ndar</li> <li>Media - una desviaci\u00f3n est\u00e1ndar</li> </ol> </li> <li>C\u00e1lculo de la masa molar de un gas ideal. Escribir una funci\u00f3n que calcule la masa molar de un gas ideal, utilizando la f\u00f3rmula <code>M = (P * V) / (R * T)</code>, donde M es la masa molar, P es la presi\u00f3n, V es el volumen, R es la constante de los gases y T es la temperatura en Kelvin.</li> <li>C\u00e1lculo de la velocidad de un objeto que se desplaza con una aceleraci\u00f3n constante. Escribir una funci\u00f3n que calcule la velocidad de un objeto que se desplaza con una aceleraci\u00f3n constante, utilizando la f\u00f3rmula <code>v = v0 + at</code>, donde v es la velocidad final, v0 es la velocidad inicial, a es la aceleraci\u00f3n y t es el tiempo.</li> </ol>"},{"location":"secuencia/","title":"Ejemplos","text":"<ol> <li>Imprimir \"Hola mundo\"</li> <li>Imprimir una frase usando secuencias de escape para que entre palabras se haga un salto de l\u00ednea</li> <li>Sumar 2 n\u00fameros e imprimir el resultado</li> <li>Ejercicio Calcular el per\u00edmetro con valores en memoria de [cuadrado|rect\u00e1ngulo], dando formato</li> <li>Jerarqu\u00eda de operadores, ejemplos de operaciones</li> <li>Ejercicio calcular el \u00e1rea de un triangulo</li> <li>Usar <code>scanf()</code></li> <li>Entrada de datos, Ejemplo de entrada de datos, suma de 2 n\u00fameros ingresados por el usuario</li> <li>Ejercicio Calcular el \u00e1rea de un cuadrado</li> <li>Ejercicio calcular el \u00e1rea y per\u00edmetro de un circulo</li> <li>Ejercicio calcular el promedio de una materia</li> <li>Decisiones, s\u00edmbolo y como se usa</li> <li>Operadores de relaci\u00f3n</li> <li>Ejemplo Preguntar la edad, \"Ya eres mayor de edad\": \"Aun eres muy joven\"</li> <li>Ejercicio: El de las mascotas</li> <li>Ejercicio: Calculadora 1) per\u00edmetro y 2)area, en caso que de otra opci\u00f3n indicar que \"no existe la opci\u00f3n\"</li> <li>Ejercicio: Verificar si un numero es \"par\" o \"impar\"</li> <li>Ejemplo: Dar 2 n\u00fameros e indicar cual es el menor de los 3</li> <li>Ejercicio: Dar 3 n\u00fameros e indicar cual es el menor de los 3</li> <li>Ejercicio: Ley de ohm</li> <li>Ejercicio: Calculo de resistencia en serie y paralelo, 2 valores</li> <li>Calcular el promedio final, solicita al usuario sus calificaciones parciales una a una, y al final da el mensaje \"Aprobado\", en caso que haya pasado arriba de 6 y \"Estas en repite\" si es menor.</li> <li>Operadores l\u00f3gicos</li> <li>Ejercicio: Solicitar una calificaci\u00f3n al usuario una calificaci\u00f3n, en caso de un valor de 0 a menor a 6, decir, \"no has aprobado\", en caso que haya sacado de 6 a 10, decir, \"aprobaste\", en caso que no este en estos rangos, decir, \"La calificaci\u00f3n no es posible\"</li> <li>Preguntar al usuario si le \"gusta correr\" y despu\u00e9s si le \"gusta nadar\", si ambos casos responde que 1)si 2)no, mandar el mensaje de que \"es muy fitness\", de lo contrario \"deber\u00edas hacer m\u00e1s ejercicio\" (Operadores l\u00f3gicos)</li> <li>Ciclo, concepto del contador o variable auxiliar, ejemplo de que un alumno vaya abrir la puerta n veces o que un alumno haga n sentadillas y los dem\u00e1s cuenten; estamos viendo el concepto de contador</li> <li>Ejemplo: Imprimir 5 veces la palabra \"Hola\"</li> <li>Ejemplo: Imprimir del 0 al 5</li> <li>Ejemplo: Diagrama de flujo del carrito seguidor de l\u00ednea (ciclos infinitos)</li> <li>Ejercicio: Imprimir del 1 al 10</li> <li>Ejercicio: Hacer una calculadora de 2 n\u00fameros, que tenga la opci\u00f3n de sumar, restar y salir, si da una opci\u00f3n que no esta, volver a mostrar el menu inicial y da un mensaje \"No existe la opci\u00f3n\", el usuario solo podr\u00e1 salir si elije la opci\u00f3n de salir. Cada que termina de hacer la operaci\u00f3n de sumar o restar, volver a mostrar el men\u00fa, hasta que elija salir de la aplicaci\u00f3n.</li> <li>Ejemplo: Imprimir la tabla de multiplicar del 3, del 1 al 10</li> <li>Operadores combinados</li> <li>Ejercicio: Imprimir la tabla de multiplicar que el usuario elija, del 1 al 10</li> <li>Calcular el promedio final, solicita al usuario sus calificaciones parciales una a una, y al final da el mensaje \"Aprobado\", en caso que haya pasado arriba de 6 y \"Estas en repite\" si es menor.(Con ciclos)</li> <li>Calcular el factorial de un n\u00famero entero. Se le solicita al usuario que ingrese un n\u00famero entero el cu\u00e1l quiere calcular el factorial del mismo. Ejemplo: 5! = 120</li> <li>Ejercicio: Obtener el promedio de una materias, solicitando cada parcial (3) (CON UN CICLO), al final imprime el promedio</li> <li>Ejercicio: Promedio de 3 parciales (con un ciclo), y si saco entre 0 a menor que 6, indicar que no paso, y se va a recursamiento, si saco entre 6 a 10, indicar que paso. Si da un calificaci\u00f3n que no existe, indicar que no existe</li> <li>Realizar una calculadora de resistencia serie, el usuario ira introduciendo los valores uno a uno, la solicitud es infinita, hasta que le usuario decide cuando terminar, la opci\u00f3n de salir es -1, despu\u00e9s de terminar imprime el resultado</li> <li>Realizar una calculadora de resistencia serie y paralelo, el usuario cual elije la opci\u00f3n, el usuario ira introduciendo los valores uno a uno, la solicitud es infinita, hasta que le usuario decide cuando terminar, la opci\u00f3n de salir es -1. despu\u00e9s de terminar imprime el resultado</li> </ol>"}]}